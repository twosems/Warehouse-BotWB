# keyboards/inline.py
from typing import List, Optional
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from database.models import Warehouse, Product
from utils.pagination import build_pagination_keyboard


def confirm_kb(prefix: str = "rcv") -> InlineKeyboardMarkup:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å / –ù–∞–∑–∞–¥).
    –ö–ª–∏–∫: <prefix>_confirm / <prefix>_back
    """
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"{prefix}_confirm")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{prefix}_back")],
    ])


def warehouses_kb(
        warehouses: List[Warehouse],
        prefix: str = "rcv_wh",
) -> InlineKeyboardMarkup:
    """
    –°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ (–°–ü–± –∏ –¢–æ–º—Å–∫ ‚Äî –ø–µ—Ä–≤—ã–º–∏), –ø–ª—é—Å –∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é¬ª.
    callback_data: <prefix>:<id>
      - –¥–ª—è Receiving –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ prefix="rcv_wh"
      - –¥–ª—è Stocks/Reports ‚Äî —Å–≤–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "pr_wh", "rep_wh")
    """
    order = {"–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": 0, "–¢–æ–º—Å–∫": 1}
    warehouses_sorted = sorted(warehouses, key=lambda w: order.get(w.name, 99))

    rows: List[List[InlineKeyboardButton]] = []
    for w in warehouses_sorted:
        label = ("üèôÔ∏è " if w.name == "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥" else "üèîÔ∏è " if w.name == "–¢–æ–º—Å–∫" else "") + w.name
        rows.append([InlineKeyboardButton(text=label, callback_data=f"{prefix}:{w.id}")])

    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="back_to_menu")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def products_page_kb(
        products: List[Product],
        page: int,
        page_size: int,
        total: int,
        back_to: Optional[str] = None,
        item_prefix: str = "rcv_prod",
        page_prefix: str = "rcv_prod_page",
) -> InlineKeyboardMarkup:
    """
    –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    callback_data:
      - <item_prefix>:<product_id>   (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é rcv_prod:<id>)
      - <page_prefix>:<page>         (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é rcv_prod_page:<n>)
      - back_to (–Ω–∞–ø—Ä–∏–º–µ—Ä, rcv_back_wh / stocks_back_wh / reports_back)
    –î–ª—è –æ—Ç—á—ë—Ç–æ–≤ —É–∫–∞–∂–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: item_prefix="report_art", page_prefix="report_art_page".
    """
    rows: List[List[InlineKeyboardButton]] = []

    # –ö–Ω–æ–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
    for p in products:
        rows.append([InlineKeyboardButton(
            text=f"{p.name} (–∞—Ä—Ç. {p.article})",
            callback_data=f"{item_prefix}:{p.id}"
        )])

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    pag_row = build_pagination_keyboard(
        page=page,
        page_size=page_size,
        total=total,
        prev_cb_prefix=page_prefix,
        next_cb_prefix=page_prefix,
        prev_text="‚óÄ –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
        next_text="–°–ª–µ–¥—É—é—â–∞—è ‚ñ∂"
    )
    if pag_row:
        rows.append(pag_row)

    # –ù–∞–∑–∞–¥ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω–æ, –∏–Ω–∞—á–µ –Ω–∞–∑–∞–¥ –∫ –º–µ–Ω—é)
    if back_to:
        rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_to)])
    else:
        rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="back_to_menu")])

    return InlineKeyboardMarkup(inline_keyboard=rows)


def qty_kb(back_to: str, cancel_to: Optional[str] = None) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —à–∞–≥–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.
    back_to: callback_data –¥–ª—è —à–∞–≥–∞ ¬´–Ω–∞–∑–∞–¥¬ª
    cancel_to: (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) callback_data –¥–ª—è ¬´–û—Ç–º–µ–Ω–∞¬ª
    """
    rows: List[List[InlineKeyboardButton]] = [
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_to)],
    ]
    if cancel_to:
        rows.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=cancel_to)])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def comment_kb(back_to: str, cancel_to: Optional[str] = None, skip_cb: str = "rcv_skip_comment") -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å / –ù–∞–∑–∞–¥ / (–æ–ø—Ü.) –û—Ç–º–µ–Ω–∞).
    skip_cb: callback_data –¥–ª—è ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π¬ª
    """
    rows: List[List[InlineKeyboardButton]] = [
        [InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=skip_cb)],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_to)],
    ]
    if cancel_to:
        rows.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=cancel_to)])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def receiving_confirm_kb(
        confirm_prefix: str,
        back_to: str,
        cancel_to: Optional[str] = None,
        confirm_text: str = "‚úÖ –î–æ–±–∞–≤–∏—Ç—å",
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è/–¥–µ–π—Å—Ç–≤–∏—è.
    confirm_prefix="rcv" ‚Üí "rcv_confirm"
    back_to: callback ¬´–Ω–∞–∑–∞–¥¬ª
    cancel_to: (–æ–ø—Ü.) callback ¬´–æ—Ç–º–µ–Ω–∞¬ª
    """
    rows: List[List[InlineKeyboardButton]] = [
        [InlineKeyboardButton(text=confirm_text, callback_data=f"{confirm_prefix}_confirm")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_to)],
    ]
    if cancel_to:
        rows.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=cancel_to)])
    return InlineKeyboardMarkup(inline_keyboard=rows)
