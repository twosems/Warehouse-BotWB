# handlers/admin_backup.py
from __future__ import annotations

import sys
import asyncio
import html
import json
import os
import shlex
import shutil
import tempfile
from typing import Union

from aiogram import Router, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    CallbackQuery,
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ContentType,
    FSInputFile,
)
from sqlalchemy import select
from sqlalchemy.engine.url import make_url

from config import (
    ADMIN_TELEGRAM_ID,
    TIMEZONE,
    RESTORE_SCRIPT_PATH,
    DB_URL,
)

from database.db import get_session, init_db, reset_db_engine, ping_db
from database.models import BackupSettings, BackupFrequency
from scheduler.backup_scheduler import reschedule_backup
from utils.backup import run_backup

router = Router()


# ===== FSM states =====
class BackupState(StatesGroup):
    waiting_sa_json = State()
    waiting_folder_id = State()
    waiting_time = State()
    waiting_retention = State()
    waiting_restore_file = State()
    waiting_restore_confirm = State()


# ===== helpers =====
async def _load_settings() -> BackupSettings | None:
    async with get_session() as s:
        return (
            await s.execute(select(BackupSettings).where(BackupSettings.id == 1))
        ).scalar_one_or_none()


async def _ensure_settings_exists(msg_or_cb: Union[Message, CallbackQuery]) -> BackupSettings | None:
    """
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ backup_settings (id=1) —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç (–ø–æ—Å–ª–µ wipe) ‚Äî —Å–æ–∑–¥–∞—ë–º —Å—Ö–µ–º—É —á–µ—Ä–µ–∑ init_db() –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å.
    """
    st = None
    try:
        st = await _load_settings()
    except Exception:
        st = None

    if not st:
        try:
            await init_db()
            async with get_session() as s:
                st = await s.get(BackupSettings, 1)
                if not st:
                    st = BackupSettings(
                        id=1,
                        enabled=False,
                        frequency=BackupFrequency.daily,
                        time_hour=3,
                        time_minute=30,
                        retention_days=30,
                    )
                    s.add(st)
                    await s.commit()
        except Exception:
            st = None

    if not st:
        out = msg_or_cb.message if isinstance(msg_or_cb, CallbackQuery) else msg_or_cb
        await out.answer("‚ö†Ô∏è –ë–î –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Emergency Restore.")
        return None
    return st


def _kb_main(st: BackupSettings) -> InlineKeyboardMarkup:
    onoff = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if st.enabled else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
    freq_map = {"daily": "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", "weekly": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", "monthly": "–ï–∂–µ–º–µ—Å—è—á–Ω–æ"}
    freq_title = freq_map.get(st.frequency.value, st.frequency.value)

    rows = [
        [InlineKeyboardButton(text=f"{onoff} ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å", callback_data="bk:toggle")],
        [
            InlineKeyboardButton(
                text=f"‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {freq_title} {st.time_hour:02d}:{st.time_minute:02d}",
                callback_data="bk:schedule",
            )
        ],
        [InlineKeyboardButton(text=f"üßπ Retention: {st.retention_days} –¥–Ω.", callback_data="bk:retention")],
        [InlineKeyboardButton(text=f"üìÅ Folder ID: {st.gdrive_folder_id or '‚Äî'}", callback_data="bk:folder")],
        [InlineKeyboardButton(text="üîê –ö–ª—é—á —Å–µ—Ä–≤–∏—Å-–∞–∫–∫–∞—É–Ω—Ç–∞ (JSON)", callback_data="bk:key")],
        [InlineKeyboardButton(text="üß™ –°–¥–µ–ª–∞—Ç—å –±—ç–∫–∞–ø —Å–µ–π—á–∞—Å", callback_data="bk:run")],
        [InlineKeyboardButton(text="‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ë–î", callback_data="bk:restore")],
        [InlineKeyboardButton(text="üÜò Emergency Restore", callback_data="bk:restore_emergency")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:root")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


async def _render(target: Union[CallbackQuery, Message], st: BackupSettings) -> None:
    text = (
        "<b>–ë—ç–∫–∞–ø—ã –ë–î ‚Üí Google Drive</b>\n\n"
        f"–°—Ç–∞—Ç—É—Å: {'üü¢ –í–∫–ª—é—á–µ–Ω–æ' if st.enabled else 'üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ'}\n"
        f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: <code>{st.frequency.value}</code> @ {st.time_hour:02d}:{st.time_minute:02d} ({TIMEZONE})\n"
        f"Retention: {st.retention_days} –¥–Ω–µ–π\n"
        f"Folder ID: <code>{st.gdrive_folder_id or '‚Äî'}</code>\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: {st.last_run_at.strftime('%Y-%m-%d %H:%M:%S') if st.last_run_at else '‚Äî'}\n"
        f"–°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ: {st.last_status or '‚Äî'}"
    )
    kb = _kb_main(st)
    if isinstance(target, CallbackQuery):
        await target.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    else:
        await target.answer(text, reply_markup=kb, parse_mode="HTML")


# ===== entry points =====
@router.message(Command("backup"))
async def backup_cmd(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_TELEGRAM_ID:
        return
    await state.clear()
    st = await _ensure_settings_exists(message)
    if not st:
        return
    await _render(message, st)


@router.callback_query(F.data == "admin:backup")
async def open_backup(cb: CallbackQuery, state: FSMContext):
    if cb.from_user.id != ADMIN_TELEGRAM_ID:
        return
    await state.clear()
    st = await _ensure_settings_exists(cb)
    if not st:
        await cb.answer()
        return
    await _render(cb, st)
    await cb.answer()


# ===== toggle on/off =====
@router.callback_query(F.data == "bk:toggle")
async def bk_toggle(cb: CallbackQuery, state: FSMContext):
    if cb.from_user.id != ADMIN_TELEGRAM_ID:
        return
    st = await _ensure_settings_exists(cb)
    if not st:
        await cb.answer()
        return

    async with get_session() as s:
        st.enabled = not st.enabled
        s.add(st)
        await s.commit()

    await reschedule_backup(cb.bot.scheduler, TIMEZONE, cb.bot.db_url)
    st = await _load_settings()
    await _render(cb, st)
    await cb.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")


# ===== schedule (—á–∞—Å—Ç–æ—Ç–∞ + –≤—Ä–µ–º—è) =====
def _kb_schedule_time(st: BackupSettings) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data="bk:f:daily"),
                InlineKeyboardButton(text="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", callback_data="bk:f:weekly"),
                InlineKeyboardButton(text="–ï–∂–µ–º–µ—Å—è—á–Ω–æ", callback_data="bk:f:monthly"),
            ],
            [InlineKeyboardButton(text=f"üïí –í—Ä–µ–º—è: {st.time_hour:02d}:{st.time_minute:02d}", callback_data="bk:time")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:backup")],
        ]
    )


@router.callback_query(F.data == "bk:schedule")
async def bk_schedule(cb: CallbackQuery, state: FSMContext):
    if cb.from_user.id != ADMIN_TELEGRAM_ID:
        return
    st = await _ensure_settings_exists(cb)
    if not st:
        await cb.answer()
        return
    await cb.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=_kb_schedule_time(st))
    await cb.answer()


@router.callback_query(F.data.startswith("bk:f:"))
async def bk_set_freq(cb: CallbackQuery, state: FSMContext):
    if cb.from_user.id != ADMIN_TELEGRAM_ID:
        return
    st = await _ensure_settings_exists(cb)
    if not st:
        await cb.answer()
        return

    freq = cb.data.split(":")[-1]
    if freq not in ("daily", "weekly", "monthly"):
        await cb.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã.")
        return

    async with get_session() as s:
        st.frequency = {
            "daily": BackupFrequency.daily,
            "weekly": BackupFrequency.weekly,
            "monthly": BackupFrequency.monthly,
        }[freq]
        s.add(st)
        await s.commit()

    await reschedule_backup(cb.bot.scheduler, TIMEZONE, cb.bot.db_url)
    st = await _load_settings()
    await cb.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=_kb_schedule_time(st))
    await cb.answer("–ß–∞—Å—Ç–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")


@router.callback_query(F.data == "bk:time")
async def bk_time(cb: CallbackQuery, state: FSMContext):
    if cb.from_user.id != ADMIN_TELEGRAM_ID:
        return
    await state.set_state(BackupState.waiting_time)
    await cb.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>HH:MM</b> (24—á), –Ω–∞–ø—Ä–∏–º–µ—Ä <code>03:15</code>.",
        parse_mode="HTML",
    )
    await cb.answer()


@router.message(BackupState.waiting_time)
async def bk_time_set(msg: Message, state: FSMContext):
    if msg.from_user.id != ADMIN_TELEGRAM_ID:
        return
    t = (msg.text or "").strip()
    try:
        hh_str, mm_str = t.split(":")
        hh = int(hh_str)
        mm = int(mm_str)
        assert 0 <= hh <= 23 and 0 <= mm <= 59
    except Exception:
        await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 03:15")
        return

    st = await _ensure_settings_exists(msg)
    if not st:
        return

    async with get_session() as s:
        st.time_hour = hh
        st.time_minute = mm
        s.add(st)
        await s.commit()

    await reschedule_backup(msg.bot.scheduler, TIMEZONE, msg.bot.db_url)
    await state.clear()

    st = await _load_settings()
    await msg.answer("–í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    await _render(msg, st)


# ===== retention =====
@router.callback_query(F.data == "bk:retention")
async def bk_retention(cb: CallbackQuery, state: FSMContext):
    if cb.from_user.id != ADMIN_TELEGRAM_ID:
        return
    await state.set_state(BackupState.waiting_retention)
    await cb.message.edit_text(
        "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ö—Ä–∞–Ω–∏—Ç—å –±—ç–∫–∞–ø—ã –Ω–∞ Google Drive? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä <code>30</code>.",
        parse_mode="HTML",
    )
    await cb.answer()


@router.message(BackupState.waiting_retention)
async def bk_retention_set(msg: Message, state: FSMContext):
    if msg.from_user.id != ADMIN_TELEGRAM_ID:
        return
    try:
        days = int((msg.text or "").strip())
        assert days >= 0
    except Exception:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ‚â• 0.")
        return

    st = await _ensure_settings_exists(msg)
    if not st:
        return

    async with get_session() as s:
        st.retention_days = days
        s.add(st)
        await s.commit()

    await state.clear()
    st = await _load_settings()
    await msg.answer("Retention —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    await _render(msg, st)


# ===== Folder ID =====
@router.callback_query(F.data == "bk:folder")
async def bk_folder(cb: CallbackQuery, state: FSMContext):
    if cb.from_user.id != ADMIN_TELEGRAM_ID:
        return
    await state.set_state(BackupState.waiting_folder_id)
    await cb.message.edit_text(
        "–ü—Ä–∏—à–ª–∏—Ç–µ <b>Folder ID</b> –ø–∞–ø–∫–∏ Google Drive, –∫—É–¥–∞ —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –±—ç–∫–∞–ø—ã.\n"
        "–ü—Ä–∏–º–µ—Ä: <code>1abcDEFghij...XYZ</code>",
        parse_mode="HTML",
    )
    await cb.answer()


@router.message(BackupState.waiting_folder_id)
async def bk_folder_set(msg: Message, state: FSMContext):
    if msg.from_user.id != ADMIN_TELEGRAM_ID:
        return
    folder_id = (msg.text or "").strip()
    if not folder_id:
        await msg.answer("Folder ID –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    st = await _ensure_settings_exists(msg)
    if not st:
        return

    async with get_session() as s:
        st.gdrive_folder_id = folder_id
        s.add(st)
        await s.commit()

    await state.clear()
    st = await _load_settings()
    await msg.answer("Folder ID —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    await _render(msg, st)


# ===== Service Account JSON =====
@router.callback_query(F.data == "bk:key")
async def bk_key(cb: CallbackQuery, state: FSMContext):
    if cb.from_user.id != ADMIN_TELEGRAM_ID:
        return
    await state.set_state(BackupState.waiting_sa_json)
    await cb.message.edit_text(
        "–ü—Ä–∏—à–ª–∏—Ç–µ <b>—Ñ–∞–π–ª JSON</b> —Å–µ—Ä–≤–∏—Å-–∞–∫–∫–∞—É–Ω—Ç–∞ Google (–∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ JSON —Ç–µ–∫—Å—Ç–æ–º).\n"
        "–°–µ—Ä–≤–∏—Å-–∞–∫–∫–∞—É–Ω—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–ø–∫–µ (–∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –ø–∞–ø–∫–æ–π —Å email –∏–∑ JSON).",
        parse_mode="HTML",
    )
    await cb.answer()


@router.message(BackupState.waiting_sa_json, F.content_type.in_({ContentType.DOCUMENT, ContentType.TEXT}))
async def bk_key_set(msg: Message, state: FSMContext):
    if msg.from_user.id != ADMIN_TELEGRAM_ID:
        return
    try:
        if msg.document:
            tg_file = await msg.bot.get_file(msg.document.file_id)
            content = await msg.bot.download_file(tg_file.file_path)
            raw = content.read().decode("utf-8")
        else:
            raw = (msg.text or "").strip()

        sa = json.loads(raw)
        for key in ("client_email", "private_key", "project_id"):
            if key not in sa:
                raise ValueError(f"missing {key}")
    except json.JSONDecodeError as e:
        await msg.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å JSON (decode): {e}")
        return
    except Exception as e:
        await msg.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å JSON: {e}")
        return

    st = await _ensure_settings_exists(msg)
    if not st:
        return

    async with get_session() as s:
        st.gdrive_sa_json = sa
        s.add(st)
        await s.commit()

    await state.clear()
    st = await _load_settings()
    await msg.answer("–ö–ª—é—á —Å–µ—Ä–≤–∏—Å-–∞–∫–∫–∞—É–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–ø–∫–µ –¥–ª—è email –∏–∑ JSON.")
    await _render(msg, st)


# ===== Run backup now =====
@router.callback_query(F.data == "bk:run")
async def bk_run(cb: CallbackQuery):
    if cb.from_user.id != ADMIN_TELEGRAM_ID:
        return
    await cb.message.edit_text("–î–µ–ª–∞—é –±—ç–∫–∞–ø‚Ä¶ —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.")
    ok, msg = await run_backup(cb.bot.db_url)
    if ok:
        await cb.message.edit_text(f"‚úÖ {msg}")
    else:
        await cb.message.edit_text(f"‚ùå {msg}")


# ===== Restore =====
ALLOWED_EXT = {".backup", ".backup.gz", ".dump", ".sql", ".sql.gz"}
MAX_BACKUP_SIZE_MB = 2048


def build_restore_cmd(filepath: str) -> str:
    """
    –ü–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ-–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.
    –ù–∞ Windows-—Ö–æ—Å—Ç–µ –≤—Å–µ–≥–¥–∞ PowerShell, –Ω–∞ Linux-—Ö–æ—Å—Ç–µ –≤—Å–µ–≥–¥–∞ linux-—Å–∫—Ä–∏–ø—Ç.
    –õ—é–±—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è RESTORE_DRIVER –∏–∑ .env –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è, —á—Ç–æ–±—ã –ª–æ–∫–∞–ª–∫–∞ –Ω–µ –ª–æ–º–∞–ª–∞ —Å–µ—Ä–≤–µ—Ä.
    """
    script = RESTORE_SCRIPT_PATH or ""
    if sys.platform.startswith("win"):
        # Windows: PowerShell-—Å–∫—Ä–∏–ø—Ç
        return f'powershell -NoProfile -ExecutionPolicy Bypass -File "{script}" -BackupPath "{filepath}"'
    else:
        # Linux: shell-—Å–∫—Ä–∏–ø—Ç —Å sudo
        quoted = shlex.quote(filepath)
        return f"sudo {shlex.quote(script)} {quoted}"


async def _restore_open_common(target: Union[CallbackQuery, Message], state: FSMContext):
    await state.clear()
    await state.set_state(BackupState.waiting_restore_file)
    text = (
        "‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î\n\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞ <b>–¥–æ–∫—É–º–µ–Ω—Ç–æ–º</b>.\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: <code>.backup</code>, <code>.backup.gz</code>, <code>.dump</code>, "
        "<code>.sql</code>, <code>.sql.gz</code>\n"
        "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –¥–µ–π—Å—Ç–≤—É—é—â–∞—è –ë–î –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–∞."
    )
    if isinstance(target, CallbackQuery):
        await target.message.edit_text(text, parse_mode="HTML")
        await target.answer()
    else:
        await target.answer(text, parse_mode="HTML")


# –û–±—ã—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π (—á–µ—Ä–µ–∑ –º–µ–Ω—é)
@router.callback_query(F.data == "bk:restore")
async def bk_restore_open(cb: CallbackQuery, state: FSMContext):
    if cb.from_user.id != ADMIN_TELEGRAM_ID:
        return
    # –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    if os.environ.get("HOST_ROLE") and os.environ["HOST_ROLE"] != "server":
        await cb.message.edit_text("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (HOST_ROLE != server).")
        await cb.answer()
        return
    await _ensure_settings_exists(cb)  # –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –Ω–æ –ø–æ–¥—Ç—è–Ω–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await _restore_open_common(cb, state)


# Emergency Restore (–±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ë–î)
@router.callback_query(F.data == "bk:restore_emergency")
async def bk_restore_emergency(cb: CallbackQuery, state: FSMContext):
    if cb.from_user.id != ADMIN_TELEGRAM_ID:
        return
    if os.environ.get("HOST_ROLE") and os.environ["HOST_ROLE"] != "server":
        await cb.message.edit_text("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (HOST_ROLE != server).")
        await cb.answer()
        return
    await _restore_open_common(cb, state)


@router.message(BackupState.waiting_restore_file)
async def bk_restore_file(msg: Message, state: FSMContext):
    if msg.from_user.id != ADMIN_TELEGRAM_ID:
        return
    if not msg.document:
        await msg.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª <b>–¥–æ–∫—É–º–µ–Ω—Ç–æ–º</b>.", parse_mode="HTML")
        return

    name = (msg.document.file_name or "").lower()
    if not any(name.endswith(ext) for ext in ALLOWED_EXT):
        await msg.answer("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –†–∞–∑—Ä–µ—à–µ–Ω—ã: .backup, .backup.gz, .dump, .sql, .sql.gz")
        return
    if msg.document.file_size and msg.document.file_size > MAX_BACKUP_SIZE_MB * 1024 * 1024:
        await msg.answer(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (> {MAX_BACKUP_SIZE_MB} –ú–ë).")
        return

    tmpdir = tempfile.mkdtemp(prefix="wb_restore_")
    filepath = os.path.join(tmpdir, msg.document.file_name)
    await msg.bot.download(msg.document, destination=filepath)

    await state.update_data(tmpdir=tmpdir, filepath=filepath)
    await state.set_state(BackupState.waiting_restore_confirm)
    await msg.answer(
        "–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω: <code>{}</code>\n\n"
        "‚ö†Ô∏è –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ—Ä–∞–∑—É: <b>–Ø –û–¢–î–ê–Æ –°–ï–ë–ï –û–¢–ß–Å–¢</b>\n"
        "–ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel".format(html.escape(msg.document.file_name)),
        parse_mode="HTML",
    )


@router.message(BackupState.waiting_restore_confirm)
async def bk_restore_confirm(msg: Message, state: FSMContext):
    if msg.from_user.id != ADMIN_TELEGRAM_ID:
        return

    if (msg.text or "").strip() != "–Ø –û–¢–î–ê–Æ –°–ï–ë–ï –û–¢–ß–Å–¢":
        await msg.answer("–ù—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–æ–≤–Ω–æ: –Ø –û–¢–î–ê–Æ –°–ï–ë–ï –û–¢–ß–Å–¢")
        return

    # –û—Ö—Ä–∞–Ω–Ω—ã–π —Ñ–ª–∞–≥: —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä
    if os.environ.get("HOST_ROLE") and os.environ["HOST_ROLE"] != "server":
        await msg.answer("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (HOST_ROLE != server).")
        await state.clear()
        return

    data = await state.get_data()
    filepath = data["filepath"]

    # –î–æ–ø. –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ Linux ‚Äî —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–¥–∞–Ω
    if not sys.platform.startswith("win"):
        if not RESTORE_SCRIPT_PATH or not os.path.exists(RESTORE_SCRIPT_PATH):
            await msg.answer("RESTORE_SCRIPT_PATH –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
            await state.clear()
            try:
                shutil.rmtree(data.get("tmpdir", ""), ignore_errors=True)
            finally:
                return

    await msg.answer("–ó–∞–ø—É—Å–∫–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ‚Ä¶ –ü—Ä–∏—à–ª—é –ª–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")

    # –ö–æ–º–∞–Ω–¥–∞ (Windows/Linux —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –≤ build_restore_cmd)
    cmd = build_restore_cmd(filepath)

    # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º PG-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ DB_URL
    env = os.environ.copy()
    try:
        u = make_url(DB_URL)
        if u.password:
            env["PGPASSWORD"] = u.password
        if u.username:
            env["PGUSER"] = u.username
        if u.host:
            env["PGHOST"] = u.host
        if u.port:
            env["PGPORT"] = str(u.port)
        if u.database:
            env["PGDATABASE"] = u.database
    except Exception:
        pass

    try:
        proc = await asyncio.create_subprocess_shell(
            cmd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.STDOUT,
            env=env,
        )
        out, _ = await proc.communicate()
        code = proc.returncode
        log = out.decode(errors="ignore") if out else "(–Ω–µ—Ç –≤—ã–≤–æ–¥–∞)"

        # –ï—Å–ª–∏ –ª–æ–≥ –¥–ª–∏–Ω–Ω—ã–π ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–º
        if len(log) > 3500:
            logpath = os.path.join(data["tmpdir"], "restore.log")
            with open(logpath, "w", encoding="utf-8") as f:
                f.write(log)
            await msg.answer_document(FSInputFile(logpath), caption=f"–ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {code}")
        else:
            safe = html.escape(log)
            text = f"–ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {code}\n\n<pre>{safe}</pre>"
            try:
                await msg.answer(text, parse_mode="HTML")
            except TelegramBadRequest:
                logpath = os.path.join(data["tmpdir"], "restore.log")
                with open(logpath, "w", encoding="utf-8") as f:
                    f.write(log)
                await msg.answer_document(FSInputFile(logpath), caption=f"–ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {code}")

        # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –ø—É–ª –∏ –ø–∏–Ω–≥—É–µ–º –ë–î –¢–û–õ–¨–ö–û –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
        if code == 0:
            try:
                await reset_db_engine()
                await ping_db()
                await msg.answer("‚úÖ –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ.")
            except Exception as e:
                err = html.escape(repr(e))
                await msg.answer(
                    f"‚ö†Ô∏è –ë—ç–∫–∞–ø –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:\n<pre>{err}</pre>",
                    parse_mode="HTML",
                )

    except Exception as e:
        err = html.escape(repr(e))
        try:
            await msg.answer(f"<b>–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è</b>:\n<pre>{err}</pre>", parse_mode="HTML")
        except TelegramBadRequest:
            await msg.answer(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {repr(e)}")
    finally:
        try:
            shutil.rmtree(data.get("tmpdir", ""), ignore_errors=True)
        except Exception:
            pass
        await state.clear()
