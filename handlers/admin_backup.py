# handlers/admin_backup.py
from __future__ import annotations

import asyncio
import html
import json
import os
import shutil
import tempfile
import time
from typing import Union, Tuple

from aiogram import Router, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    CallbackQuery,
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ContentType,
    FSInputFile,
)
from sqlalchemy import select, text
from sqlalchemy.engine.url import make_url

import httpx  # pip install httpx

from config import (
    ADMIN_TELEGRAM_ID,
    TIMEZONE,
    DB_URL,
)

from database.db import get_session, init_db, reset_db_engine, ping_db
from database.models import BackupSettings, BackupFrequency
from scheduler.backup_scheduler import reschedule_backup
from utils.backup import run_backup, build_restore_cmd

router = Router()

# --------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—É—Ç–µ–π –∏ —Å–µ—Ä–≤–∏—Å–∞ ---------
GOOGLE_TOKEN_PATH = os.environ.get("GOOGLE_OAUTH_TOKEN_PATH", "/etc/botwb/google/token.json")
GOOGLE_CLIENT_PATH = os.environ.get("GOOGLE_OAUTH_CLIENT_PATH", "/etc/botwb/google/client_secret_tv.json")
SERVICE_NAME = "warehouse-botwb.service"

# --------- OAuth Device Flow —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã/—Å–∫–æ—É–ø ---------
OAUTH_SCOPE = "https://www.googleapis.com/auth/drive.file"
DEVICE_CODE_URL = "https://oauth2.googleapis.com/device/code"
TOKEN_URL = "https://oauth2.googleapis.com/token"


# ===== FSM states =====
class BackupState(StatesGroup):
    waiting_folder_id = State()
    waiting_time = State()
    waiting_retention = State()
    waiting_restore_file = State()
    waiting_restore_confirm = State()
    # OAuth/Token
    waiting_oauth_poll = State()      # –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ Google
    waiting_token_upload = State()    # –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ token.json
    # Wipe DB
    waiting_wipe_phrase = State()
    waiting_wipe_dbname = State()


# ===== helpers =====
async def _load_settings() -> BackupSettings | None:
    async with get_session() as s:
        return (await s.execute(select(BackupSettings).where(BackupSettings.id == 1))).scalar_one_or_none()


async def _ensure_settings_exists(msg_or_cb: Union[Message, CallbackQuery]) -> BackupSettings | None:
    """
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ backup_settings (id=1) —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç (–ø–æ—Å–ª–µ wipe) ‚Äî —Å–æ–∑–¥–∞—ë–º —Å—Ö–µ–º—É —á–µ—Ä–µ–∑ init_db() –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å.
    """
    st = None
    try:
        st = await _load_settings()
    except Exception:
        st = None

    if not st:
        try:
            await init_db()
            async with get_session() as s:
                st = await s.get(BackupSettings, 1)
                if not st:
                    st = BackupSettings(
                        id=1,
                        enabled=False,
                        frequency=BackupFrequency.daily,
                        time_hour=3,
                        time_minute=30,
                        retention_days=30,
                    )
                    s.add(st)
                    await s.commit()
        except Exception:
            st = None

    if not st:
        out = msg_or_cb.message if isinstance(msg_or_cb, CallbackQuery) else msg_or_cb
        await out.answer("‚ö†Ô∏è –ë–î –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Emergency Restore.")
        return None
    return st


def _kb_main(st: BackupSettings) -> InlineKeyboardMarkup:
    onoff = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if st.enabled else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
    freq_map = {"daily": "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", "weekly": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", "monthly": "–ï–∂–µ–º–µ—Å—è—á–Ω–æ"}
    freq_title = freq_map.get(st.frequency.value, st.frequency.value)

    rows = [
        [InlineKeyboardButton(text=f"{onoff} ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å", callback_data="bk:toggle")],
        [
            InlineKeyboardButton(
                text=f"‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {freq_title} {st.time_hour:02d}:{st.time_minute:02d}",
                callback_data="bk:schedule",
            )
        ],
        [InlineKeyboardButton(text=f"üßπ Retention: {st.retention_days} –¥–Ω.", callback_data="bk:retention")],
        [InlineKeyboardButton(text=f"üìÅ Folder ID: {st.gdrive_folder_id or '‚Äî'}", callback_data="bk:folder")],
        [InlineKeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å Google (OAuth)", callback_data="bk:oauth")],
        [InlineKeyboardButton(text="‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å token.json", callback_data="bk:token_upload")],
        [InlineKeyboardButton(text="üß™ –°–¥–µ–ª–∞—Ç—å –±—ç–∫–∞–ø —Å–µ–π—á–∞—Å", callback_data="bk:run")],
        [InlineKeyboardButton(text="‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ë–î", callback_data="bk:restore")],
        [InlineKeyboardButton(text="üß® –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É", callback_data="bk:wipe")],
        [InlineKeyboardButton(text="üÜò Emergency Restore", callback_data="bk:restore_emergency")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:root")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


async def _render(target: Union[CallbackQuery, Message], st: BackupSettings) -> None:
    text = (
        "<b>–ë—ç–∫–∞–ø—ã –ë–î ‚Üí Google Drive</b>\n\n"
        f"–°—Ç–∞—Ç—É—Å: {'üü¢ –í–∫–ª—é—á–µ–Ω–æ' if st.enabled else 'üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ'}\n"
        f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: <code>{st.frequency.value}</code> @ {st.time_hour:02d}:{st.time_minute:02d} ({TIMEZONE})\n"
        f"Retention: {st.retention_days} –¥–Ω–µ–π\n"
        f"Folder ID: <code>{st.gdrive_folder_id or '‚Äî'}</code>\n"
        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: <b>OAuth</b> (client_secret.json + token.json, –ø—É—Ç–∏ –±–µ—Ä—É—Ç—Å—è –∏–∑ .env)\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: {st.last_run_at.strftime('%Y-%m-%d %H:%M:%S') if st.last_run_at else '‚Äî'}\n"
        f"–°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ: {st.last_status or '‚Äî'}"
    )
    kb = _kb_main(st)
    if isinstance(target, CallbackQuery):
        await target.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    else:
        await target.answer(text, reply_markup=kb, parse_mode="HTML")


async def _auto_back_to_menu(target: Union[CallbackQuery, Message]) -> None:
    """–ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –≤–µ—Ä–Ω—ë–º—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω –±—ç–∫–∞–ø–æ–≤."""
    await asyncio.sleep(2)
    st = await _load_settings()
    if not st:
        return
    await _render(target, st)


async def _restart_service() -> Tuple[bool, str]:
    try:
        proc = await asyncio.create_subprocess_shell(
            f"sudo systemctl restart {SERVICE_NAME}",
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.STDOUT,
        )
        out, _ = await proc.communicate()
        ok = proc.returncode == 0
        msg = (out or b"").decode(errors="ignore")
        return ok, msg
    except Exception as e:
        return False, repr(e)


async def _save_token_json(raw_json: str) -> None:
    os.makedirs(os.path.dirname(GOOGLE_TOKEN_PATH), exist_ok=True)
    with open(GOOGLE_TOKEN_PATH, "w", encoding="utf-8") as f:
        f.write(raw_json)
    # –ø—Ä–∞–≤–∞/–≤–ª–∞–¥–µ–ª–µ—Ü ‚Äî best-effort
    try:
        uid = __import__("pwd").getpwnam("malinabotwh").pw_uid
        gid = __import__("grp").getgrnam("malinabotwh").gr_gid
        os.chown(GOOGLE_TOKEN_PATH, uid, gid)
    except Exception:
        pass
    os.chmod(GOOGLE_TOKEN_PATH, 0o600)


def _load_client_id_secret() -> tuple[str, str]:
    with open(GOOGLE_CLIENT_PATH, "r", encoding="utf-8") as f:
        cfg = json.load(f)
    data = cfg.get("installed") or cfg  # client_secret.json –æ–±—ã—á–Ω–æ –ø–æ–¥ –∫–ª—é—á–æ–º "installed"
    return data["client_id"], data["client_secret"]


# ===== entry points =====
@router.message(Command("backup"))
async def backup_cmd(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_TELEGRAM_ID:
        return
    await state.clear()
    st = await _ensure_settings_exists(message)
    if not st:
        return
    await _render(message, st)


@router.callback_query(F.data == "admin:backup")
async def open_backup(cb: CallbackQuery, state: FSMContext):
    if cb.from_user.id != ADMIN_TELEGRAM_ID:
        return
    await state.clear()
    st = await _ensure_settings_exists(cb)
    if not st:
        await cb.answer()
        return
    await _render(cb, st)
    await cb.answer()


# ===== toggle on/off =====
@router.callback_query(F.data == "bk:toggle")
async def bk_toggle(cb: CallbackQuery, state: FSMContext):
    if cb.from_user.id != ADMIN_TELEGRAM_ID:
        return
    st = await _ensure_settings_exists(cb)
    if not st:
        await cb.answer()
        return

    async with get_session() as s:
        st.enabled = not st.enabled
        s.add(st)
        await s.commit()

    await reschedule_backup(cb.bot.scheduler, TIMEZONE, cb.bot.db_url)
    st = await _load_settings()
    await _render(cb, st)
    await cb.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")


# ===== schedule (—á–∞—Å—Ç–æ—Ç–∞ + –≤—Ä–µ–º—è) =====
def _kb_schedule_time(st: BackupSettings) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data="bk:f:daily"),
                InlineKeyboardButton(text="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", callback_data="bk:f:weekly"),
                InlineKeyboardButton(text="–ï–∂–µ–º–µ—Å—è—á–Ω–æ", callback_data="bk:f:monthly"),
            ],
            [InlineKeyboardButton(text=f"üïí –í—Ä–µ–º—è: {st.time_hour:02d}:{st.time_minute:02d}", callback_data="bk:time")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:backup")],
        ]
    )


@router.callback_query(F.data == "bk:schedule")
async def bk_schedule(cb: CallbackQuery, state: FSMContext):
    if cb.from_user.id != ADMIN_TELEGRAM_ID:
        return
    st = await _ensure_settings_exists(cb)
    if not st:
        await cb.answer()
        return
    await cb.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=_kb_schedule_time(st))
    await cb.answer()


@router.callback_query(F.data.startswith("bk:f:"))
async def bk_set_freq(cb: CallbackQuery, state: FSMContext):
    if cb.from_user.id != ADMIN_TELEGRAM_ID:
        return
    st = await _ensure_settings_exists(cb)
    if not st:
        await cb.answer()
        return

    freq = cb.data.split(":")[-1]
    if freq not in ("daily", "weekly", "monthly"):
        await cb.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã.")
        return

    async with get_session() as s:
        st.frequency = {
            "daily": BackupFrequency.daily,
            "weekly": BackupFrequency.weekly,
            "monthly": BackupFrequency.monthly,
        }[freq]
        s.add(st)
        await s.commit()

    await reschedule_backup(cb.bot.scheduler, TIMEZONE, cb.bot.db_url)
    st = await _load_settings()
    await cb.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=_kb_schedule_time(st))
    await cb.answer("–ß–∞—Å—Ç–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")


@router.callback_query(F.data == "bk:time")
async def bk_time(cb: CallbackQuery, state: FSMContext):
    if cb.from_user.id != ADMIN_TELEGRAM_ID:
        return
    await state.set_state(BackupState.waiting_time)
    await cb.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>HH:MM</b> (24—á), –Ω–∞–ø—Ä–∏–º–µ—Ä <code>03:15</code>.",
        parse_mode="HTML",
    )
    await cb.answer()


@router.message(BackupState.waiting_time)
async def bk_time_set(msg: Message, state: FSMContext):
    if msg.from_user.id != ADMIN_TELEGRAM_ID:
        return
    t = (msg.text or "").strip()
    try:
        hh_str, mm_str = t.split(":")
        hh = int(hh_str)
        mm = int(mm_str)
        assert 0 <= hh <= 23 and 0 <= mm <= 59
    except Exception:
        await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 03:15")
        return

    st = await _ensure_settings_exists(msg)
    if not st:
        return

    async with get_session() as s:
        st.time_hour = hh
        st.time_minute = mm
        s.add(st)
        await s.commit()

    await reschedule_backup(msg.bot.scheduler, TIMEZONE, msg.bot.db_url)
    await state.clear()

    st = await _load_settings()
    await msg.answer("–í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    await _render(msg, st)


# ===== retention =====
@router.callback_query(F.data == "bk:retention")
async def bk_retention(cb: CallbackQuery, state: FSMContext):
    if cb.from_user.id != ADMIN_TELEGRAM_ID:
        return
    await state.set_state(BackupState.waiting_retention)
    await cb.message.edit_text(
        "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ö—Ä–∞–Ω–∏—Ç—å –±—ç–∫–∞–ø—ã –Ω–∞ Google Drive? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä <code>30</code>.",
        parse_mode="HTML",
    )
    await cb.answer()


@router.message(BackupState.waiting_retention)
async def bk_retention_set(msg: Message, state: FSMContext):
    if msg.from_user.id != ADMIN_TELEGRAM_ID:
        return
    try:
        days = int((msg.text or "").strip())
        assert days >= 0
    except Exception:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ‚â• 0.")
        return

    st = await _ensure_settings_exists(msg)
    if not st:
        return

    async with get_session() as s:
        st.retention_days = days
        s.add(st)
        await s.commit()

    await state.clear()
    st = await _load_settings()
    await msg.answer("Retention —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    await _render(msg, st)


# ===== Folder ID =====
@router.callback_query(F.data == "bk:folder")
async def bk_folder(cb: CallbackQuery, state: FSMContext):
    if cb.from_user.id != ADMIN_TELEGRAM_ID:
        return
    await state.set_state(BackupState.waiting_folder_id)
    await cb.message.edit_text(
        "–ü—Ä–∏—à–ª–∏—Ç–µ <b>Folder ID</b> –ø–∞–ø–∫–∏ Google Drive, –∫—É–¥–∞ —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –±—ç–∫–∞–ø—ã.\n"
        "–ü—Ä–∏–º–µ—Ä: <code>1abcDEFghij...XYZ</code>",
        parse_mode="HTML",
    )
    await cb.answer()


@router.message(BackupState.waiting_folder_id)
async def bk_folder_set(msg: Message, state: FSMContext):
    if msg.from_user.id != ADMIN_TELEGRAM_ID:
        return
    folder_id = (msg.text or "").strip()
    if not folder_id:
        await msg.answer("Folder ID –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    st = await _ensure_settings_exists(msg)
    if not st:
        return

    async with get_session() as s:
        st.gdrive_folder_id = folder_id
        s.add(st)
        await s.commit()

    await state.clear()
    st = await _load_settings()
    await msg.answer("Folder ID —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    await _render(msg, st)


# ===== OAuth: Device Flow =====
@router.callback_query(F.data == "bk:oauth")
async def bk_oauth(cb: CallbackQuery, state: FSMContext):
    if cb.from_user.id != ADMIN_TELEGRAM_ID:
        return

    # 1) —á–∏—Ç–∞–µ–º client_id/secret
    try:
        client_id, client_secret = _load_client_id_secret()
    except Exception as e:
        await cb.message.edit_text(
            f"–ù–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π <code>{html.escape(GOOGLE_CLIENT_PATH)}</code>:\n"
            f"<pre>{html.escape(repr(e))}</pre>",
            parse_mode="HTML",
        )
        await cb.answer()
        await _auto_back_to_menu(cb)
        return

    # 2) –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º device_code
    try:
        async with httpx.AsyncClient(timeout=20) as cli:
            r = await cli.post(DEVICE_CODE_URL, data={"client_id": client_id, "scope": OAUTH_SCOPE})
            r.raise_for_status()
            dev = r.json()
    except Exception as e:
        await cb.message.edit_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å device code:\n<pre>{html.escape(repr(e))}</pre>", parse_mode="HTML")
        await cb.answer()
        await _auto_back_to_menu(cb)
        return

    await state.update_data(
        device_code=dev["device_code"],
        interval=int(dev.get("interval", 5)),
        client_id=client_id,
        client_secret=client_secret,
    )

    text = (
        "üîó <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google OAuth</b>\n\n"
        "1) –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:\n"
        f"<code>{dev['verification_url']}</code>\n"
        "2) –í—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥:\n"
        f"<b><code>{dev['user_code']}</code></b>\n\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚Äî –±–æ—Ç —Å–∞–º –∑–∞–±–µ—Ä—ë—Ç —Ç–æ–∫–µ–Ω –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç —Å–µ—Ä–≤–∏—Å."
    )
    await cb.message.edit_text(text, parse_mode="HTML")
    await cb.answer()

    # 3) –ø–æ–ª–ª–∏–º —Ç–æ–∫–µ–Ω
    await state.set_state(BackupState.waiting_oauth_poll)
    deadline = time.monotonic() + 600  # –¥–æ 10 –º–∏–Ω—É—Ç
    while time.monotonic() < deadline:
        await asyncio.sleep(int(dev.get("interval", 5)))
        try:
            async with httpx.AsyncClient(timeout=20) as cli:
                tr = await cli.post(
                    TOKEN_URL,
                    data={
                        "client_id": client_id,
                        "client_secret": client_secret,
                        "device_code": dev["device_code"],
                        "grant_type": "urn:ietf:params:oauth:grant-type:device_code",
                    },
                )
            if tr.status_code == 200:
                tok = tr.json()
                token_json = json.dumps(
                    {
                        "token": tok.get("access_token"),
                        "refresh_token": tok.get("refresh_token"),
                        "token_uri": TOKEN_URL,
                        "client_id": client_id,
                        "client_secret": client_secret,
                        "scopes": [OAUTH_SCOPE],
                        "universe_domain": "googleapis.com",
                    },
                    ensure_ascii=False,
                )
                await _save_token_json(token_json)
                ok, log = await _restart_service()
                msg = "‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω." if ok else \
                    f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω, –Ω–æ —Ä–µ—Å—Ç–∞—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è:\n<pre>{html.escape(log)}</pre>"
                await cb.message.edit_text(msg, parse_mode="HTML")
                await state.clear()
                await _auto_back_to_menu(cb)
                return
            else:
                # –æ—à–∏–±–∫–∏ –æ–∂–∏–¥–∞–Ω–∏—è
                try:
                    err = tr.json().get("error")
                except Exception:
                    err = None
                if err in ("authorization_pending", "slow_down"):
                    continue
                if err in ("access_denied", "expired_token"):
                    await cb.message.edit_text(f"‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞: {err}")
                    await state.clear()
                    await _auto_back_to_menu(cb)
                    return
                await cb.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞:\n<pre>{html.escape(tr.text)}</pre>", parse_mode="HTML")
                await state.clear()
                await _auto_back_to_menu(cb)
                return
        except Exception:
            # –ø–æ–¥–æ–∂–¥—ë–º –∏ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
            continue

    await cb.message.edit_text("‚è≥ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    await state.clear()
    await _auto_back_to_menu(cb)


# ===== –ó–∞–≥—Ä—É–∑–∫–∞ token.json —Ñ–∞–π–ª–æ–º =====
@router.callback_query(F.data == "bk:token_upload")
async def bk_token_upload(cb: CallbackQuery, state: FSMContext):
    if cb.from_user.id != ADMIN_TELEGRAM_ID:
        return
    await state.set_state(BackupState.waiting_token_upload)
    await cb.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ <b>token.json</b> –¥–æ–∫—É–º–µ–Ω—Ç–æ–º. –Ø —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—â—É —Å–µ—Ä–≤–∏—Å.", parse_mode="HTML")
    await cb.answer()


@router.message(BackupState.waiting_token_upload, F.content_type == ContentType.DOCUMENT)
async def bk_token_file(msg: Message, state: FSMContext):
    if msg.from_user.id != ADMIN_TELEGRAM_ID:
        return
    if not (msg.document and msg.document.file_name and msg.document.file_name.lower().endswith(".json")):
        await msg.answer("–≠—Ç–æ –Ω–µ .json. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª token.json.")
        return

    tg_file = await msg.bot.get_file(msg.document.file_id)
    content = await msg.bot.download_file(tg_file.file_path)
    raw = content.read().decode("utf-8", errors="ignore")

    # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    try:
        data = json.loads(raw)
        assert "client_id" in data and "client_secret" in data
        assert "refresh_token" in data or "token" in data
    except Exception:
        await msg.answer("–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π token.json –æ—Ç Google OAuth.")
        return

    await _save_token_json(raw)
    ok, log = await _restart_service()
    await state.clear()
    if ok:
        await msg.answer("‚úÖ –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.")
    else:
        safe = html.escape(log)
        await msg.answer(f"‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω, –Ω–æ —Ä–µ—Å—Ç–∞—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è:\n<pre>{safe}</pre>", parse_mode="HTML")
    await _auto_back_to_menu(msg)


# ===== Run backup now =====
@router.callback_query(F.data == "bk:run")
async def bk_run(cb: CallbackQuery):
    if cb.from_user.id != ADMIN_TELEGRAM_ID:
        return
    await cb.message.edit_text("–î–µ–ª–∞—é –±—ç–∫–∞–ø‚Ä¶ —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.")
    ok, msg = await run_backup(cb.bot.db_url)
    text = f"‚úÖ {msg}" if ok else f"‚ùå {msg}"
    await cb.message.edit_text(text, parse_mode="HTML")
    await _auto_back_to_menu(cb)


# ===== Restore =====
ALLOWED_EXT = {".backup", ".backup.gz", ".dump", ".sql", ".sql.gz"}
MAX_BACKUP_SIZE_MB = 2048


async def _restore_open_common(target: Union[CallbackQuery, Message], state: FSMContext):
    await state.clear()
    await state.set_state(BackupState.waiting_restore_file)
    text = (
        "‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î\n\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞ <b>–¥–æ–∫—É–º–µ–Ω—Ç–æ–º</b>.\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: <code>.backup</code>, <code>.backup.gz</code>, <code>.dump</code>, "
        "<code>.sql</code>, <code>.sql.gz</code>\n"
        "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –¥–µ–π—Å—Ç–≤—É—é—â–∞—è –ë–î –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–∞."
    )
    if isinstance(target, CallbackQuery):
        await target.message.edit_text(text, parse_mode="HTML")
        await target.answer()
    else:
        await target.answer(text, parse_mode="HTML")


# –û–±—ã—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π (—á–µ—Ä–µ–∑ –º–µ–Ω—é)
@router.callback_query(F.data == "bk:restore")
async def bk_restore_open(cb: CallbackQuery, state: FSMContext):
    if cb.from_user.id != ADMIN_TELEGRAM_ID:
        return
    # –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    if os.environ.get("HOST_ROLE") and os.environ["HOST_ROLE"] != "server":
        await cb.message.edit_text("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (HOST_ROLE != server).")
        await cb.answer()
        await _auto_back_to_menu(cb)
        return
    await _ensure_settings_exists(cb)  # –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –Ω–æ –ø–æ–¥—Ç—è–Ω–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await _restore_open_common(cb, state)


# Emergency Restore (–±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ë–î)
@router.callback_query(F.data == "bk:restore_emergency")
async def bk_restore_emergency(cb: CallbackQuery, state: FSMContext):
    if cb.from_user.id != ADMIN_TELEGRAM_ID:
        return
    if os.environ.get("HOST_ROLE") and os.environ["HOST_ROLE"] != "server":
        await cb.message.edit_text("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (HOST_ROLE != server).")
        await cb.answer()
        await _auto_back_to_menu(cb)
        return
    await _restore_open_common(cb, state)


@router.message(BackupState.waiting_restore_file)
async def bk_restore_file(msg: Message, state: FSMContext):
    if msg.from_user.id != ADMIN_TELEGRAM_ID:
        return
    if not msg.document:
        await msg.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª <b>–¥–æ–∫—É–º–µ–Ω—Ç–æ–º</b>.", parse_mode="HTML")
        return

    name = (msg.document.file_name or "").lower()
    if not any(name.endswith(ext) for ext in ALLOWED_EXT):
        await msg.answer("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –†–∞–∑—Ä–µ—à–µ–Ω—ã: .backup, .backup.gz, .dump, .sql, .sql.gz")
        return
    if msg.document.file_size and msg.document.file_size > MAX_BACKUP_SIZE_MB * 1024 * 1024:
        await msg.answer(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (> {MAX_BACKUP_SIZE_MB} –ú–ë).")
        return

    tmpdir = tempfile.mkdtemp(prefix="wb_restore_")
    filepath = os.path.join(tmpdir, msg.document.file_name)
    await msg.bot.download(msg.document, destination=filepath)

    await state.update_data(tmpdir=tmpdir, filepath=filepath)
    await state.set_state(BackupState.waiting_restore_confirm)
    await msg.answer(
        "–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω: <code>{}</code>\n\n"
        "‚ö†Ô∏è –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ—Ä–∞–∑—É: <b>–Ø –û–¢–î–ê–Æ –°–ï–ë–ï –û–¢–ß–Å–¢</b>\n"
        "–ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel".format(html.escape(msg.document.file_name)),
        parse_mode="HTML",
    )


@router.message(BackupState.waiting_restore_confirm)
async def bk_restore_confirm(msg: Message, state: FSMContext):
    if msg.from_user.id != ADMIN_TELEGRAM_ID:
        return

    # –¢—Ä–µ–±—É–µ–º —Ç–æ—á–Ω—É—é —Ñ—Ä–∞–∑—É-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if (msg.text or "").strip() != "–Ø –û–¢–î–ê–Æ –°–ï–ë–ï –û–¢–ß–Å–¢":
        await msg.answer("–ù—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–æ–≤–Ω–æ: –Ø –û–¢–î–ê–Æ –°–ï–ë–ï –û–¢–ß–Å–¢")
        return

    # –û—Ö—Ä–∞–Ω–Ω—ã–π —Ñ–ª–∞–≥: —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä
    if os.environ.get("HOST_ROLE") and os.environ["HOST_ROLE"] != "server":
        await msg.answer("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (HOST_ROLE != server).")
        await state.clear()
        await _auto_back_to_menu(msg)
        return

    data = await state.get_data()
    filepath = data["filepath"]

    # --- Preflight RESTORE_SCRIPT_PATH (—Å—Ç—Ä–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∏–∑ ENV) ---
    restore_path = os.environ.get("RESTORE_SCRIPT_PATH")
    if not restore_path or not (os.path.isfile(restore_path) and os.access(restore_path, os.X_OK)):
        await msg.answer(
            "‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: RESTORE_SCRIPT_PATH –Ω–µ –∑–∞–¥–∞–Ω "
            "–∏–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç/–Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."
        )
        try:
            shutil.rmtree(data.get("tmpdir", ""), ignore_errors=True)
        finally:
            await state.clear()
        await _auto_back_to_menu(msg)
        return
    # --- /Preflight ---

    await msg.answer("–ó–∞–ø—É—Å–∫–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ‚Ä¶ –ü—Ä–∏—à–ª—é –ª–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")

    # –ö–æ–º–∞–Ω–¥–∞: —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞ (sudo -n $RESTORE_SCRIPT_PATH <file>)
    cmd = build_restore_cmd(filepath)

    # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º PG-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ DB_URL (—É–¥–æ–±–Ω–æ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤)
    env = os.environ.copy()
    try:
        u = make_url(DB_URL)
        if u.password:
            env["PGPASSWORD"] = u.password
        if u.username:
            env["PGUSER"] = u.username
        if u.host:
            env["PGHOST"] = u.host
        if u.port:
            env["PGPORT"] = str(u.port)
        if u.database:
            env["PGDATABASE"] = u.database
    except Exception:
        pass

    try:
        proc = await asyncio.create_subprocess_shell(
            cmd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.STDOUT,
            env=env,
        )
        out, _ = await proc.communicate()
        code = proc.returncode
        log = out.decode(errors="ignore") if out else "(–Ω–µ—Ç –≤—ã–≤–æ–¥–∞)"

        # –ï—Å–ª–∏ –ª–æ–≥ –¥–ª–∏–Ω–Ω—ã–π ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–º
        if len(log) > 3500:
            logpath = os.path.join(data["tmpdir"], "restore.log")
            with open(logpath, "w", encoding="utf-8") as f:
                f.write(log)
            await msg.answer_document(FSInputFile(logpath), caption=f"–ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {code}")
        else:
            safe = html.escape(log)
            text = f"–ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {code}\n\n<pre>{safe}</pre>"
            try:
                await msg.answer(text, parse_mode="HTML")
            except TelegramBadRequest:
                logpath = os.path.join(data["tmpdir"], "restore.log")
                with open(logpath, "w", encoding="utf-8") as f:
                    f.write(log)
                await msg.answer_document(FSInputFile(logpath), caption=f"–ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {code}")

        # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –ø—É–ª –∏ –ø–∏–Ω–≥—É–µ–º –ë–î –¢–û–õ–¨–ö–û –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
        if code == 0:
            try:
                await reset_db_engine()
                await ping_db()
                await msg.answer("‚úÖ –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ.")
            except Exception as e:
                err = html.escape(repr(e))
                await msg.answer(
                    f"‚ö†Ô∏è –ë—ç–∫–∞–ø –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:\n<pre>{err}</pre>",
                    parse_mode="HTML",
                )

    except Exception as e:
        try:
            await msg.answer(f"<b>–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è</b>:\n<pre>{html.escape(repr(e))}</pre>", parse_mode="HTML")
        except TelegramBadRequest:
            await msg.answer(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {repr(e)}")
    finally:
        try:
            shutil.rmtree(data.get("tmpdir", ""), ignore_errors=True)
        except Exception:
            pass
        await state.clear()
        await _auto_back_to_menu(msg)


# ===== –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã (wipe) =====
def _mask_db_url() -> tuple[str, str]:
    """–í–µ—Ä–Ω—ë—Ç (–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URI, –∏–º—è –ë–î)."""
    try:
        u = make_url(DB_URL)
        safe = u.render_as_string(hide_password=True)
        dbname = u.database or ""
        return safe, dbname
    except Exception:
        return "(–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å DB_URL)", ""

@router.callback_query(F.data == "bk:wipe")
async def bk_wipe(cb: CallbackQuery, state: FSMContext):
    if cb.from_user.id != ADMIN_TELEGRAM_ID:
        return

    # –¢–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    if os.environ.get("HOST_ROLE") and os.environ["HOST_ROLE"] != "server":
        await cb.message.edit_text("–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (HOST_ROLE != server).")
        await cb.answer()
        await _auto_back_to_menu(cb)
        return

    safe_url, dbname = _mask_db_url()
    await state.set_state(BackupState.waiting_wipe_phrase)
    await state.update_data(dbname=dbname)
    await cb.message.edit_text(
        "üß® <b>–û–ß–ò–°–¢–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•</b>\n\n"
        f"–¢–µ–∫—É—â–∞—è –ë–î: <code>{html.escape(safe_url)}</code>\n\n"
        "‚ö†Ô∏è –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –í–°–Å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ö–µ–º—ã <code>public</code>.\n\n"
        "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–æ–≤–Ω–æ: <b>–Ø –ü–û–î–¢–í–ï–†–ñ–î–ê–Æ –û–ß–ò–°–¢–ö–£ –ë–î</b>\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel",
        parse_mode="HTML",
    )
    await cb.answer()


@router.message(BackupState.waiting_wipe_phrase)
async def bk_wipe_phrase(msg: Message, state: FSMContext):
    if msg.from_user.id != ADMIN_TELEGRAM_ID:
        return
    if (msg.text or "").strip() != "–Ø –ü–û–î–¢–í–ï–†–ñ–î–ê–Æ –û–ß–ò–°–¢–ö–£ –ë–î":
        await msg.answer("–ù—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–æ–≤–Ω–æ: –Ø –ü–û–î–¢–í–ï–†–ñ–î–ê–Æ –û–ß–ò–°–¢–ö–£ –ë–î")
        return

    data = await state.get_data()
    dbname = data.get("dbname") or ""
    if not dbname:
        _, dbname = _mask_db_url()

    await state.set_state(BackupState.waiting_wipe_dbname)
    await msg.answer(
        "–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥.\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ë–î –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: <code>{html.escape(dbname or '(–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å)')}</code>",
        parse_mode="HTML",
    )


@router.message(BackupState.waiting_wipe_dbname)
async def bk_wipe_do(msg: Message, state: FSMContext):
    if msg.from_user.id != ADMIN_TELEGRAM_ID:
        return

    data = await state.get_data()
    expected_db = data.get("dbname") or _mask_db_url()[1]
    provided = (msg.text or "").strip()

    if not expected_db or provided != expected_db:
        await msg.answer("–ò–º—è –ë–î –Ω–µ —Å–æ–≤–ø–∞–ª–æ. –û—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
        await _auto_back_to_menu(msg)
        return

    # –ß–∏—Å—Ç–∏–º –ë–ï–ó –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã: TRUNCATE –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü public —Å –∫–∞—Å–∫–∞–¥–æ–º –∏ —Å–±—Ä–æ—Å–æ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
    sql_truncate_all = text("""
DO $$
DECLARE
    stmt text;
BEGIN
    SELECT 'TRUNCATE TABLE ' ||
           string_agg(format('%I.%I', n.nspname, c.relname), ', ')
           || ' RESTART IDENTITY CASCADE'
      INTO stmt
    FROM pg_class c
    JOIN pg_namespace n ON n.oid = c.relnamespace
    WHERE c.relkind = 'r'
      AND n.nspname = 'public';

    IF stmt IS NOT NULL THEN
        EXECUTE stmt;
    END IF;
END $$;
""")

    try:
        async with get_session() as s:
            await s.execute(sql_truncate_all)
            await s.commit()

        # –ü—É–ª –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø–µ—Ä–µ—Å–æ–∑–¥–∞–¥–∏–º –∏ –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await reset_db_engine()
        await ping_db()

        await msg.answer("‚úÖ –ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞ (TRUNCATE ‚Ä¶ RESTART IDENTITY CASCADE).")
    except Exception as e:
        safe = html.escape(repr(e))
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: <pre>{safe}</pre>", parse_mode="HTML")
    finally:
        await state.clear()
        await _auto_back_to_menu(msg)
