# handlers/admin.py
import logging
from aiogram import types, Bot, Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select, func, update
from sqlalchemy.exc import IntegrityError

from database.db import get_session, ensure_core_data
from database.models import (
    User, UserRole,
    Warehouse, Product,
    StockMovement, Supply, SupplyItem
)
from handlers.common import send_content


# ---------- FSM ----------
class AdminState(StatesGroup):
    selecting_action = State()
    selecting_user = State()
    entering_message = State()

class ProductState(StatesGroup):
    entering_article = State()
    entering_name = State()
    confirming = State()

class WarehouseCreateState(StatesGroup):
    entering_name = State()

class WarehouseRenameState(StatesGroup):
    entering_name = State()

class ProductEditState(StatesGroup):
    selecting = State()
    renaming = State()


# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def kb_admin_root() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè¨ –°–∫–ª–∞–¥—ã", callback_data="admin_wh")],
        [InlineKeyboardButton(text="üì¶ –¢–æ–≤–∞—Ä—ã", callback_data="admin_prod")],
        [InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")],
    ])

def kb_admin_users() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_list_users")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_delete_user")],
        [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="admin_send_message")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin")],
    ])

def kb_admin_wh_root() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫", callback_data="admin_wh_list")],
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å", callback_data="admin_wh_add")],
        [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="admin_wh_edit")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin")],
    ])

def kb_wh_edit_pick(whs) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{w.name} ({'‚úÖ' if w.is_active else 'üö´'})", callback_data=f"admin_wh_pick:{w.id}")]
        for w in whs
    ])
    kb.inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_wh")])
    return kb

def kb_wh_actions(wh: Warehouse) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"admin_wh_rename:{wh.id}")],
        [InlineKeyboardButton(
            text=("üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if not wh.is_active else "üî¥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"),
            callback_data=f"admin_wh_toggle:{wh.id}"
        )],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_wh_del:{wh.id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_wh_edit")],
    ])

def kb_admin_prod_root() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å", callback_data="admin_product_add")],
        [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="admin_product_edit")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin")],
    ])

def kb_prod_pick(products) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{p.name} (–∞—Ä—Ç. {p.article}) {'‚úÖ' if p.is_active else 'üö´'}", callback_data=f"adm_prod_pick:{p.id}")]
        for p in products
    ])
    kb.inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_prod")])
    return kb

def kb_prod_actions(p: Product) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"adm_prod_rename:{p.id}")],
        [InlineKeyboardButton(text=("üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if not p.is_active else "üî¥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"),
                              callback_data=f"adm_prod_toggle:{p.id}")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"adm_prod_del:{p.id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_product_edit")],
    ])

def kb_back(data: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=data)]])

def kb_confirm(prefix: str, id_: int, back: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"{prefix}_confirm:{id_}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞",     callback_data=back)],
    ])


# ---------- –ö–æ—Ä–Ω–µ–≤–æ–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é ----------
async def on_admin(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.", show_alert=True); return
    await cb.answer()
    await send_content(cb, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ: –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª", reply_markup=kb_admin_root())
    await state.set_state(AdminState.selecting_action)


# ---------- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ----------
async def admin_users_menu(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    await send_content(cb, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=kb_admin_users())

async def admin_list_users(cb: types.CallbackQuery, user: User):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    async with get_session() as session:
        result = await session.execute(select(User).order_by(User.id))
        users = result.scalars().all()
    if not users:
        await send_content(cb, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=kb_admin_users()); return
    text = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n" + "\n".join(
        f"ID: {u.telegram_id}, –ò–º—è: {u.name}, –†–æ–ª—å: {u.role.value}" for u in users
    )
    await send_content(cb, text, reply_markup=kb_admin_users())

async def admin_delete_user(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    async with get_session() as session:
        result = await session.execute(select(User).where(User.telegram_id != user.telegram_id))
        users = result.scalars().all()
    if not users:
        await send_content(cb, "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=kb_admin_users()); return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{u.name} ({u.role.value})", callback_data=f"delete_user:{u.telegram_id}")]
        for u in users
    ])
    kb.inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")])
    await send_content(cb, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
    await state.set_state(AdminState.selecting_user)

async def admin_confirm_delete_user(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    try:
        _, user_id_str = cb.data.split(":"); user_id = int(user_id_str)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True); return
    async with get_session() as session:
        target_q = await session.execute(select(User).where(User.telegram_id == user_id))
        target_user = target_q.scalar()
        if not target_user:
            await cb.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True); return
        await session.delete(target_user); await session.commit()
    await cb.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω.")
    await send_content(cb, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", reply_markup=kb_admin_users())
    await state.clear()

async def admin_send_message(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    async with get_session() as session:
        result = await session.execute(select(User).where(User.telegram_id != user.telegram_id))
        users = result.scalars().all()
    if not users:
        await send_content(cb, "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=kb_admin_users()); return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{u.name} ({u.role.value})", callback_data=f"send_msg:{u.telegram_id}")]
        for u in users
    ])
    kb.inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")])
    await send_content(cb, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:", reply_markup=kb)
    await state.set_state(AdminState.selecting_user)

async def admin_enter_message(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    try:
        _, user_id_str = cb.data.split(":"); user_id = int(user_id_str)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True); return
    await state.update_data(target_user_id=user_id)
    await send_content(cb, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")
    await state.set_state(AdminState.entering_message)

async def admin_send_message_text(message: types.Message, user: User, state: FSMContext, bot: Bot):
    if user.role != UserRole.admin:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω."); return
    data = await state.get_data(); target_user_id = data.get("target_user_id")
    if not target_user_id:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω."); return
    try:
        await bot.send_message(target_user_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{message.text}")
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", e)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    await state.clear()


# ---------- –°–∫–ª–∞–¥—ã ----------
async def admin_wh_root(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    await ensure_core_data()
    await send_content(cb, "–°–∫–ª–∞–¥—ã: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=kb_admin_wh_root())

async def admin_wh_list(cb: types.CallbackQuery, user: User):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    async with get_session() as session:
        res = await session.execute(select(Warehouse).order_by(Warehouse.name))
        whs = res.scalars().all()
    if not whs:
        await send_content(cb, "–°–∫–ª–∞–¥–æ–≤ –Ω–µ—Ç.", reply_markup=kb_admin_wh_root()); return
    text = "–°–∫–ª–∞–¥—ã:\n" + "\n".join(f"- {w.name} (id={w.id}, active={w.is_active})" for w in whs)
    await send_content(cb, text, reply_markup=kb_admin_wh_root())

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞
async def admin_wh_add(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    await state.clear()
    await state.set_state(WarehouseCreateState.entering_name)
    await send_content(
        cb, "–í–≤–µ–¥–∏—Ç–µ **–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞**:",
        reply_markup=kb_back("admin_wh")
    )

async def admin_wh_add_apply(message: types.Message, user: User, state: FSMContext):
    name = (message.text or "").strip()
    if not name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:"); return
    async with get_session() as session:
        try:
            w = Warehouse(name=name, is_active=True)
            session.add(w)
            await session.commit()
        except IntegrityError:
            await session.rollback()
            await message.answer("–°–∫–ª–∞–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è:"); return
    await state.clear()
    await message.answer("‚úÖ –°–∫–ª–∞–¥ —Å–æ–∑–¥–∞–Ω.", reply_markup=kb_back("admin_wh"))

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–≤—ã–±–æ—Ä —Å–∫–ª–∞–¥–∞)
async def admin_wh_edit(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    async with get_session() as session:
        res = await session.execute(select(Warehouse).order_by(Warehouse.name))
        whs = res.scalars().all()
    if not whs:
        await send_content(cb, "–°–∫–ª–∞–¥–æ–≤ –Ω–µ—Ç.", reply_markup=kb_admin_wh_root()); return
    await send_content(cb, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb_wh_edit_pick(whs))

async def admin_wh_pick(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    try:
        _, sid = cb.data.split(":"); wh_id = int(sid)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True); return
    async with get_session() as session:
        q = await session.execute(select(Warehouse).where(Warehouse.id == wh_id))
        wh = q.scalar()
    if not wh:
        await cb.answer("–°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True); return
    await state.update_data(wh_id=wh.id)
    await send_content(cb, f"–°–∫–ª–∞–¥: *{wh.name}* (active={wh.is_active})\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_wh_actions(wh))

# –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞
async def admin_wh_rename_start(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    try:
        _, sid = cb.data.split(":"); wh_id = int(sid)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True); return
    await state.clear()
    await state.set_state(WarehouseRenameState.entering_name)
    await state.update_data(wh_id=wh_id)
    await send_content(cb, "–í–≤–µ–¥–∏—Ç–µ *–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞*:", reply_markup=kb_back("admin_wh_edit"))

async def admin_wh_rename_apply(message: types.Message, user: User, state: FSMContext):
    data = await state.get_data()
    wh_id = data.get("wh_id")
    name = (message.text or "").strip()
    if not wh_id:
        await message.answer("–ù–µ –≤—ã–±—Ä–∞–Ω —Å–∫–ª–∞–¥ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è."); return
    if not name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:"); return
    async with get_session() as session:
        try:
            await session.execute(update(Warehouse).where(Warehouse.id == wh_id).values(name=name))
            await session.commit()
        except IntegrityError:
            await session.rollback()
            await message.answer("–°–∫–ª–∞–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è:"); return
    await state.clear()
    await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=kb_back("admin_wh_edit"))

# –¢–æ–≥–≥–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async def admin_wh_toggle(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    try:
        _, sid = cb.data.split(":"); wh_id = int(sid)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True); return
    async with get_session() as session:
        q = await session.execute(select(Warehouse).where(Warehouse.id == wh_id))
        wh = q.scalar()
        if not wh:
            await cb.answer("–°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True); return
        wh.is_active = not wh.is_active
        await session.commit()
    await send_content(cb, f"‚úÖ –ì–æ—Ç–æ–≤–æ. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∫–ª–∞–¥–∞ —Ç–µ–ø–µ—Ä—å: { 'True' if wh.is_active else 'False' }",
                       reply_markup=kb_admin_wh_root())

# –£–¥–∞–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–≤—è–∑–µ–π)
async def admin_wh_del(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    try:
        _, sid = cb.data.split(":"); wh_id = int(sid)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True); return

    # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–≤—è–∑–∏
    async with get_session() as session:
        sm_count = (await session.execute(
            select(func.count()).select_from(StockMovement).where(StockMovement.warehouse_id == wh_id)
        )).scalar_one()
        sup_count = (await session.execute(
            select(func.count()).select_from(Supply).where(Supply.warehouse_id == wh_id)
        )).scalar_one()

    if sm_count > 0 or sup_count > 0:
        await send_content(cb, "‚ùó –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∫–ª–∞–¥: –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è/–ø–æ—Å—Ç–∞–≤–∫–∏.\n"
                               "–í—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å.", reply_markup=kb_wh_actions(Warehouse(id=wh_id, name="...", is_active=True)))
        return

    await send_content(cb, "–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å–∫–ª–∞–¥ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ?", reply_markup=kb_confirm("admin_wh_del", wh_id, "admin_wh_edit"))

async def admin_wh_del_confirm(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    try:
        _, sid = cb.data.split(":"); wh_id = int(sid)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True); return
    async with get_session() as session:
        q = await session.execute(select(Warehouse).where(Warehouse.id == wh_id))
        wh = q.scalar()
        if not wh:
            await cb.answer("–°–∫–ª–∞–¥ —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."); return
        await session.delete(wh)
        await session.commit()
    await send_content(cb, "‚úÖ –°–∫–ª–∞–¥ —É–¥–∞–ª—ë–Ω.", reply_markup=kb_admin_wh_root())


# ---------- –¢–æ–≤–∞—Ä—ã ----------
async def admin_prod_root(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    await send_content(cb, "–¢–æ–≤–∞—Ä—ã: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=kb_admin_prod_root())

# –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
async def admin_product_add(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    await state.clear()
    await state.set_state(ProductState.entering_article)
    await send_content(cb, "–í–≤–µ–¥–∏—Ç–µ **–∞—Ä—Ç–∏–∫—É–ª** (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π):", reply_markup=kb_back("admin_prod"))

async def admin_product_enter_article(message: types.Message, user: User, state: FSMContext):
    article = (message.text or "").strip()
    if not article:
        await message.answer("–ê—Ä—Ç–∏–∫—É–ª –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:"); return
    async with get_session() as session:
        exists_q = await session.execute(select(Product).where(Product.article == article))
        exists = exists_q.scalar()
    if exists:
        await message.answer("–¢–∞–∫–æ–π –∞—Ä—Ç–∏–∫—É–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π:"); return
    await state.update_data(article=article)
    await state.set_state(ProductState.entering_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ **–Ω–∞–∑–≤–∞–Ω–∏–µ** —Ç–æ–≤–∞—Ä–∞:")

async def admin_product_enter_name(message: types.Message, user: User, state: FSMContext):
    name = (message.text or "").strip()
    if not name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:"); return
    data = await state.get_data(); article = data["article"]
    text = ("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n\n"
            f"–ê—Ä—Ç–∏–∫—É–ª: *{article}*\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: *{name}*\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã–π: *–î–∞*\n")
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data="adm_prod_confirm")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_prod")],
    ])
    await state.update_data(name=name)
    await state.set_state(ProductState.confirming)
    await message.answer(text, parse_mode="Markdown", reply_markup=kb)

async def admin_product_confirm(cb: types.CallbackQuery, user: User, state: FSMContext):
    await cb.answer()
    data = await state.get_data()
    async with get_session() as session:
        p = Product(article=data["article"], name=data["name"], is_active=True)
        session.add(p); await session.commit()
    await state.clear()
    await send_content(cb, "‚úÖ –¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω.", reply_markup=kb_admin_prod_root())

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä
async def admin_product_edit(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    async with get_session() as session:
        total = (await session.execute(select(func.count()).select_from(Product))).scalar_one()
        res = await session.execute(select(Product).order_by(Product.name).limit(30))
        products = res.scalars().all()
    if not products:
        await send_content(cb, "–¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç.", reply_markup=kb_admin_prod_root()); return
    await send_content(cb, f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä (–ø–µ—Ä–≤—ã–µ 30, –≤—Å–µ–≥–æ {total}):", reply_markup=kb_prod_pick(products))
    await state.set_state(ProductEditState.selecting)

async def admin_product_pick(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    try:
        _, sid = cb.data.split(":"); pid = int(sid)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True); return
    async with get_session() as session:
        q = await session.execute(select(Product).where(Product.id == pid))
        p = q.scalar()
    if not p:
        await cb.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True); return
    await state.update_data(prod_id=p.id)
    await send_content(cb, f"–¢–æ–≤–∞—Ä: *{p.name}* (–∞—Ä—Ç. {p.article}) active={p.is_active}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                       reply_markup=kb_prod_actions(p))

# –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
async def admin_product_rename_start(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    try:
        _, sid = cb.data.split(":"); pid = int(sid)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True); return
    await state.update_data(prod_id=pid)
    await send_content(cb, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞*:", reply_markup=kb_back("admin_product_edit"))
    await state.set_state(ProductEditState.renaming)

async def admin_product_rename_apply(message: types.Message, user: User, state: FSMContext):
    data = await state.get_data()
    name = (message.text or "").strip()
    if not name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:"); return
    pid = data.get("prod_id")
    async with get_session() as session:
        await session.execute(update(Product).where(Product.id == pid).values(name=name))
        await session.commit()
    await state.clear()
    await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=kb_back("admin_product_edit"))

# –¢–æ–≥–≥–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞
async def admin_product_toggle(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    try:
        _, sid = cb.data.split(":"); pid = int(sid)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True); return
    async with get_session() as session:
        q = await session.execute(select(Product).where(Product.id == pid))
        p = q.scalar()
        if not p:
            await cb.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True); return
        p.is_active = not p.is_active
        await session.commit()
    await send_content(cb, f"‚úÖ –ì–æ—Ç–æ–≤–æ. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ —Ç–µ–ø–µ—Ä—å: { 'True' if p.is_active else 'False' }",
                       reply_markup=kb_admin_prod_root())

# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–≤—è–∑–µ–π)
async def admin_prod_del(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    try:
        _, sid = cb.data.split(":"); pid = int(sid)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True); return

    # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–≤—è–∑–∏
    async with get_session() as session:
        mv_count = (await session.execute(
            select(func.count()).select_from(StockMovement).where(StockMovement.product_id == pid)
        )).scalar_one()
        si_count = (await session.execute(
            select(func.count()).select_from(SupplyItem).where(SupplyItem.product_id == pid)
        )).scalar_one()

    if mv_count > 0 or si_count > 0:
        await send_content(cb, "‚ùó –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä: –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è/–ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å—Ç–∞–≤–æ–∫.\n"
                               "–í—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å.", reply_markup=kb_back("admin_product_edit"))
        return

    await send_content(cb, "–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ?", reply_markup=kb_confirm("adm_prod_del", pid, "admin_product_edit"))

async def admin_prod_del_confirm(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    try:
        _, sid = cb.data.split(":"); pid = int(sid)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True); return
    async with get_session() as session:
        q = await session.execute(select(Product).where(Product.id == pid))
        p = q.scalar()
        if not p:
            await cb.answer("–¢–æ–≤–∞—Ä —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."); return
        await session.delete(p)
        await session.commit()
    await send_content(cb, "‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω.", reply_markup=kb_admin_prod_root())


# ---------- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ----------
def register_admin_handlers(dp: Dispatcher):
    # –ö–æ—Ä–µ–Ω—å
    dp.callback_query.register(on_admin,                   lambda c: c.data == "admin")

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    dp.callback_query.register(admin_users_menu,           lambda c: c.data == "admin_users")
    dp.callback_query.register(admin_list_users,           lambda c: c.data == "admin_list_users")
    dp.callback_query.register(admin_delete_user,          lambda c: c.data == "admin_delete_user")
    dp.callback_query.register(admin_confirm_delete_user,  lambda c: c.data.startswith("delete_user:"))
    dp.callback_query.register(admin_send_message,         lambda c: c.data == "admin_send_message")
    dp.callback_query.register(admin_enter_message,        lambda c: c.data.startswith("send_msg:"))
    dp.message.register(admin_send_message_text,           AdminState.entering_message)

    # –°–∫–ª–∞–¥—ã
    dp.callback_query.register(admin_wh_root,              lambda c: c.data == "admin_wh")
    dp.callback_query.register(admin_wh_list,              lambda c: c.data == "admin_wh_list")
    dp.callback_query.register(admin_wh_add,               lambda c: c.data == "admin_wh_add")
    dp.message.register(admin_wh_add_apply,                WarehouseCreateState.entering_name)
    dp.callback_query.register(admin_wh_edit,              lambda c: c.data == "admin_wh_edit")
    dp.callback_query.register(admin_wh_pick,              lambda c: c.data.startswith("admin_wh_pick:"))
    dp.callback_query.register(admin_wh_rename_start,      lambda c: c.data.startswith("admin_wh_rename:"))
    dp.message.register(admin_wh_rename_apply,             WarehouseRenameState.entering_name)
    dp.callback_query.register(admin_wh_toggle,            lambda c: c.data.startswith("admin_wh_toggle:"))
    dp.callback_query.register(admin_wh_del,               lambda c: c.data.startswith("admin_wh_del:"))
    dp.callback_query.register(admin_wh_del_confirm,       lambda c: c.data.startswith("admin_wh_del_confirm:"))

    # –¢–æ–≤–∞—Ä—ã
    dp.callback_query.register(admin_prod_root,            lambda c: c.data == "admin_prod")
    dp.callback_query.register(admin_product_add,          lambda c: c.data == "admin_product_add")
    dp.message.register(admin_product_enter_article,       ProductState.entering_article)
    dp.message.register(admin_product_enter_name,          ProductState.entering_name)
    dp.callback_query.register(admin_product_confirm,      ProductState.confirming)

    dp.callback_query.register(admin_product_edit,         lambda c: c.data == "admin_product_edit")
    dp.callback_query.register(admin_product_pick,         lambda c: c.data.startswith("adm_prod_pick:"))
    dp.callback_query.register(admin_product_rename_start, lambda c: c.data.startswith("adm_prod_rename:"))
    dp.message.register(admin_product_rename_apply,        ProductEditState.renaming)
    dp.callback_query.register(admin_product_toggle,       lambda c: c.data.startswith("adm_prod_toggle:"))
    dp.callback_query.register(admin_prod_del,             lambda c: c.data.startswith("adm_prod_del:"))
    dp.callback_query.register(admin_prod_del_confirm,     lambda c: c.data.startswith("adm_prod_del_confirm:"))
