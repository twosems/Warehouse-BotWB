# handlers/admin.py
import logging
from typing import Optional, List, Tuple
import os  # –¥–ª—è os.path.basename –≤ –æ—Ç—á—ë—Ç–µ
from aiogram import types, Dispatcher, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select, func, update, desc
from sqlalchemy.orm import aliased
from sqlalchemy.sql import and_

from database.db import get_session
from database.models import (
    User, UserRole,
    Warehouse, Product,
    StockMovement, Supply, SupplyItem,
    AuditLog,
    MenuItem, RoleMenuVisibility,
)
from database.menu_visibility import (
    ensure_menu_visibility_defaults,
    get_visible_menu_items_for_role,
    toggle_menu_visibility,
)
from handlers.common import send_content


# =========================
#          FSM
# =========================
class AdminState(StatesGroup):
    selecting_action = State()
    selecting_user = State()
    entering_message = State()

class ProductState(StatesGroup):
    entering_article = State()
    entering_name = State()
    confirming = State()

class WarehouseCreateState(StatesGroup):
    entering_name = State()

class WarehouseRenameState(StatesGroup):
    entering_name = State()

class ProductEditState(StatesGroup):
    selecting = State()
    renaming = State()


# =========================
#       KEYBOARDS
# =========================
def kb_admin_root() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè¨ –°–∫–ª–∞–¥—ã", callback_data="admin_wh")],
        [InlineKeyboardButton(text="üì¶ –¢–æ–≤–∞—Ä—ã", callback_data="admin_prod")],
        [InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
        [InlineKeyboardButton(text="üßæ –ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π", callback_data="admin_audit")],
        [InlineKeyboardButton(text="üíæ –ë—ç–∫–∞–ø –ë–î (—Å–µ–π—á–∞—Å)", callback_data="admin_backup_now")],  # ‚Üê –ù–û–í–û–ï
        [InlineKeyboardButton(text="üß© –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–Ω—é", callback_data="adm_menu_roles")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")],
    ])

def kb_admin_users() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_list_users")],
        [InlineKeyboardButton(text="–°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_change_role")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_delete_user")],
        [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="admin_send_message")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin")],
    ])

def kb_admin_wh_root() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫", callback_data="admin_wh_list")],
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å", callback_data="admin_wh_add")],
        [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="admin_wh_edit")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin")],
    ])

def kb_wh_edit_pick(whs: List[Warehouse]) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{w.name} ({'‚úÖ' if w.is_active else 'üö´'})", callback_data=f"admin_wh_pick:{w.id}")]
        for w in whs
    ])
    kb.inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_wh")])
    return kb

def kb_wh_actions(wh: Warehouse) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"admin_wh_rename:{wh.id}")],
        [InlineKeyboardButton(
            text=("üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if not getattr(wh, "is_active", True) else "üî¥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"),
            callback_data=f"admin_wh_toggle:{wh.id}"
        )],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_wh_del:{wh.id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_wh_edit")],
    ])

def kb_admin_prod_root() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å", callback_data="admin_product_add")],
        [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="admin_product_edit")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin")],
    ])

def kb_prod_pick(products: List[Product]) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{p.name} (–∞—Ä—Ç. {p.article}) {'‚úÖ' if p.is_active else 'üö´'}", callback_data=f"adm_prod_pick:{p.id}")]
        for p in products
    ])
    kb.inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_prod")])
    return kb

def kb_prod_actions(p: Product) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"adm_prod_rename:{p.id}")],
        [InlineKeyboardButton(text=("üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if not p.is_active else "üî¥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"),
                              callback_data=f"adm_prod_toggle:{p.id}")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"adm_prod_del:{p.id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_product_edit")],
    ])

def kb_back(data: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=data)]])

def kb_confirm(prefix: str, id_: int, back: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"{prefix}_confirm:{id_}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞",     callback_data=back)],
    ])

# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: —Å–º–µ–Ω–∞ —Ä–æ–ª–∏ ---
def kb_pick_user_for_role(users: List[User]) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{u.name or u.telegram_id} ‚Äî {u.role.value}", callback_data=f"role_user:{u.telegram_id}")]
            for u in users
        ]
    )
    kb.inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")])
    return kb

def kb_pick_role(telegram_id: int, current: UserRole) -> InlineKeyboardMarkup:
    def mark(r: UserRole) -> str:
        return "‚úÖ " if r == current else ""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{mark(UserRole.admin)}–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", callback_data=f"role_set:{telegram_id}:admin")],
        [InlineKeyboardButton(text=f"{mark(UserRole.user)}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",   callback_data=f"role_set:{telegram_id}:user")],
        [InlineKeyboardButton(text=f"{mark(UserRole.manager)}–ú–µ–Ω–µ–¥–∂–µ—Ä",     callback_data=f"role_set:{telegram_id}:manager")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_change_role")],
    ])

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–Ω—é: –≤—ã–±–æ—Ä —Ä–æ–ª–∏ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ ---
def kb_menu_roles_root() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–Ω—é: admin",   callback_data="adm_menu_role:admin")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–Ω—é: user",    callback_data="adm_menu_role:user")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–Ω—é: manager", callback_data="adm_menu_role:manager")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin")],
    ])

def kb_menu_visibility(role: UserRole, state_map: dict) -> InlineKeyboardMarkup:
    def mark(flag): return "‚úÖ" if flag else "üö´"
    rows = []
    for key, label in [
        ("stocks", "üì¶ –û—Å—Ç–∞—Ç–∫–∏"),
        ("receiving", "‚ûï –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ"),
        ("supplies", "üöö –ü–æ—Å—Ç–∞–≤–∫–∏"),
        ("packing", "üéÅ –£–ø–∞–∫–æ–≤–∫–∞"),
        ("reports", "üìà –û—Ç—á—ë—Ç—ã"),
        ("admin", "‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"),
    ]:
        rows.append([InlineKeyboardButton(
            text=f"{label} {mark(state_map.get(key, False))}",
            callback_data=f"adm_menu_toggle:{role.value}:{key}"
        )])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏", callback_data="adm_menu_roles")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


# =========================
#       ROOT
# =========================
async def on_admin(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.", show_alert=True); return
    await cb.answer()
    await send_content(cb, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ: –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª", reply_markup=kb_admin_root())
    await state.set_state(AdminState.selecting_action)


# =========================
#       USERS
# =========================
async def admin_users_menu(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    await send_content(cb, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=kb_admin_users())

async def admin_list_users(cb: types.CallbackQuery, user: User):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    async with get_session() as session:
        result = await session.execute(select(User).order_by(User.id))
        users = result.scalars().all()
    if not users:
        await send_content(cb, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=kb_admin_users()); return
    lines = []
    for u in users:
        lines.append(f"ID: {u.id} | TG: {u.telegram_id} | –ò–º—è: {u.name or '-'} | –†–æ–ª—å: {u.role.value}")
    await send_content(cb, "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n" + "\n".join(lines), reply_markup=kb_admin_users())

async def admin_delete_user(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    async with get_session() as session:
        result = await session.execute(select(User).where(User.telegram_id != user.telegram_id).order_by(User.id))
        users = result.scalars().all()
    if not users:
        await send_content(cb, "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=kb_admin_users()); return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{u.name or u.telegram_id} ({u.role.value})", callback_data=f"delete_user:{u.telegram_id}")]
        for u in users
    ])
    kb.inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")])
    await send_content(cb, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
    await state.set_state(AdminState.selecting_user)

async def admin_confirm_delete_user(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    try:
        _, user_id_str = cb.data.split(":"); tg_id = int(user_id_str)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True); return
    async with get_session() as session:
        target_q = await session.execute(select(User).where(User.telegram_id == tg_id))
        target_user = target_q.scalar()
        if not target_user:
            await cb.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True); return
        await session.delete(target_user); await session.commit()
    await cb.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω.")
    await send_content(cb, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", reply_markup=kb_admin_users())
    await state.clear()

async def admin_send_message(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    async with get_session() as session:
        result = await session.execute(select(User).where(User.telegram_id != user.telegram_id))
        users = result.scalars().all()
    if not users:
        await send_content(cb, "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=kb_admin_users()); return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{u.name or u.telegram_id} ({u.role.value})", callback_data=f"send_msg:{u.telegram_id}")]
        for u in users
    ])
    kb.inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")])
    await send_content(cb, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:", reply_markup=kb)
    await state.set_state(AdminState.selecting_user)

async def admin_enter_message(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    try:
        _, user_id_str = cb.data.split(":"); tg_id = int(user_id_str)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True); return
    await state.update_data(target_user_tg=tg_id)
    await send_content(cb, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")
    await state.set_state(AdminState.entering_message)

async def admin_send_message_text(message: types.Message, user: User, state: FSMContext, bot: Bot):
    if user.role != UserRole.admin:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω."); return
    data = await state.get_data(); target_tg = data.get("target_user_tg")
    if not target_tg:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω."); return
    try:
        await bot.send_message(target_tg, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{message.text}")
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", e)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    await state.clear()

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ ---
async def admin_change_role(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    async with get_session() as session:
        res = await session.execute(select(User).order_by(User.id))
        users = res.scalars().all()
    if not users:
        await send_content(cb, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.", reply_markup=kb_admin_users()); return
    await send_content(cb, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–º–µ–Ω—ã —Ä–æ–ª–∏:", reply_markup=kb_pick_user_for_role(users))

async def admin_pick_user_for_role(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    try:
        _, tg_id_str = cb.data.split(":")
        target_tg_id = int(tg_id_str)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True); return

    if target_tg_id == user.telegram_id:
        await cb.answer("–ù–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å —Ä–æ–ª—å —Å–∞–º–æ–º—É —Å–µ–±–µ.", show_alert=True); return

    async with get_session() as session:
        q = await session.execute(select(User).where(User.telegram_id == target_tg_id))
        target = q.scalar()
    if not target:
        await cb.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True); return

    await send_content(cb, f"–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: {target.role.value}. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é:",
                       reply_markup=kb_pick_role(target.telegram_id, target.role))

async def admin_apply_role(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    try:
        _, tg_id_str, role_str = cb.data.split(":")
        target_tg_id = int(tg_id_str)
        new_role = UserRole(role_str)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True); return

    if target_tg_id == user.telegram_id:
        await cb.answer("–ù–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å —Ä–æ–ª—å —Å–∞–º–æ–º—É —Å–µ–±–µ.", show_alert=True); return

    async with get_session() as session:
        q = await session.execute(select(User).where(User.telegram_id == target_tg_id))
        target = q.scalar()
        if not target:
            await cb.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True); return
        old_role = target.role
        if old_role == new_role:
            await send_content(cb, f"–†–æ–ª—å –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å: –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É {new_role.value}.", reply_markup=kb_admin_users()); return
        target.role = new_role
        await session.commit()

    await send_content(cb, f"–ì–æ—Ç–æ–≤–æ. –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_tg_id} –∏–∑–º–µ–Ω–µ–Ω–∞: {old_role.value} ‚Üí {new_role.value}.",
                       reply_markup=kb_admin_users())


# =========================
#       WAREHOUSES
# =========================
async def admin_wh_root(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    await send_content(cb, "–°–∫–ª–∞–¥—ã: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=kb_admin_wh_root())

async def admin_wh_list(cb: types.CallbackQuery, user: User):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    async with get_session() as session:
        res = await session.execute(select(Warehouse).order_by(Warehouse.name))
        whs = res.scalars().all()
    if not whs:
        await send_content(cb, "–°–∫–ª–∞–¥–æ–≤ –Ω–µ—Ç.", reply_markup=kb_admin_wh_root()); return
    text = "–°–∫–ª–∞–¥—ã:\n" + "\n".join(f"- {w.name} (id={w.id}, active={w.is_active})" for w in whs)
    await send_content(cb, text, reply_markup=kb_admin_wh_root())

async def admin_wh_add(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    await state.clear()
    await state.set_state(WarehouseCreateState.entering_name)
    await send_content(cb, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞:", reply_markup=kb_back("admin_wh"))

async def admin_wh_add_apply(message: types.Message, user: User, state: FSMContext):
    name = (message.text or "").strip()
    if not name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:"); return
    async with get_session() as session:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        exists = (await session.execute(select(Warehouse).where(Warehouse.name == name))).scalar()
        if exists:
            await message.answer("–°–∫–ª–∞–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è:"); return
        w = Warehouse(name=name, is_active=True)
        session.add(w)
        await session.commit()
    await state.clear()
    await message.answer("‚úÖ –°–∫–ª–∞–¥ —Å–æ–∑–¥–∞–Ω.", reply_markup=kb_back("admin_wh"))

async def admin_wh_edit(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    async with get_session() as session:
        res = await session.execute(select(Warehouse).order_by(Warehouse.name))
        whs = res.scalars().all()
    if not whs:
        await send_content(cb, "–°–∫–ª–∞–¥–æ–≤ –Ω–µ—Ç.", reply_markup=kb_admin_wh_root()); return
    await send_content(cb, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb_wh_edit_pick(whs))

async def admin_wh_pick(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    try:
        _, sid = cb.data.split(":"); wh_id = int(sid)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True); return
    async with get_session() as session:
        q = await session.execute(select(Warehouse).where(Warehouse.id == wh_id))
        wh = q.scalar()
    if not wh:
        await cb.answer("–°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True); return
    await state.update_data(wh_id=wh.id)
    await send_content(cb, f"–°–∫–ª–∞–¥: {wh.name} (active={wh.is_active}). –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_wh_actions(wh))

async def admin_wh_rename_start(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    try:
        _, sid = cb.data.split(":"); wh_id = int(sid)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True); return
    await state.clear()
    await state.set_state(WarehouseRenameState.entering_name)
    await state.update_data(wh_id=wh_id)
    await send_content(cb, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞:", reply_markup=kb_back("admin_wh_edit"))

async def admin_wh_rename_apply(message: types.Message, user: User, state: FSMContext):
    data = await state.get_data()
    wh_id = data.get("wh_id")
    name = (message.text or "").strip()
    if not wh_id:
        await message.answer("–ù–µ –≤—ã–±—Ä–∞–Ω —Å–∫–ª–∞–¥ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è."); return
    if not name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:"); return
    async with get_session() as session:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        exists = (await session.execute(select(Warehouse).where(Warehouse.name == name, Warehouse.id != wh_id))).scalar()
        if exists:
            await message.answer("–°–∫–ª–∞–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è:"); return
        await session.execute(update(Warehouse).where(Warehouse.id == wh_id).values(name=name))
        await session.commit()
    await state.clear()
    await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=kb_back("admin_wh_edit"))

async def admin_wh_toggle(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    try:
        _, sid = cb.data.split(":"); wh_id = int(sid)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True); return
    async with get_session() as session:
        q = await session.execute(select(Warehouse).where(Warehouse.id == wh_id))
        wh = q.scalar()
        if not wh:
            await cb.answer("–°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True); return
        wh.is_active = not wh.is_active
        await session.commit()
    await send_content(cb, f"‚úÖ –ì–æ—Ç–æ–≤–æ. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∫–ª–∞–¥–∞ —Ç–µ–ø–µ—Ä—å: {'True' if wh.is_active else 'False'}",
                       reply_markup=kb_admin_wh_root())

async def admin_wh_del(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    try:
        _, sid = cb.data.split(":"); wh_id = int(sid)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True); return

    # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–≤—è–∑–∏
    async with get_session() as session:
        sm_count = (await session.execute(
            select(func.count()).select_from(StockMovement).where(StockMovement.warehouse_id == wh_id)
        )).scalar_one()
        sup_count = (await session.execute(
            select(func.count()).select_from(Supply).where(Supply.warehouse_id == wh_id)
        )).scalar_one()

    if sm_count > 0 or sup_count > 0:
        await send_content(cb, "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∫–ª–∞–¥: –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è/–ø–æ—Å—Ç–∞–≤–∫–∏.\n–í—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å.",
                           reply_markup=kb_back("admin_wh_edit"))
        return

    await send_content(cb, "–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å–∫–ª–∞–¥ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ?",
                       reply_markup=kb_confirm("admin_wh_del", wh_id, "admin_wh_edit"))

async def admin_wh_del_confirm(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    try:
        _, sid = cb.data.split(":"); wh_id = int(sid)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True); return
    async with get_session() as session:
        q = await session.execute(select(Warehouse).where(Warehouse.id == wh_id))
        wh = q.scalar()
        if not wh:
            await cb.answer("–°–∫–ª–∞–¥ —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."); return
        await session.delete(wh)
        await session.commit()
    await send_content(cb, "‚úÖ –°–∫–ª–∞–¥ —É–¥–∞–ª—ë–Ω.", reply_markup=kb_admin_wh_root())


# =========================
#        PRODUCTS
# =========================
async def admin_prod_root(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    await send_content(cb, "–¢–æ–≤–∞—Ä—ã: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=kb_admin_prod_root())

async def admin_product_add(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    await state.clear()
    await state.set_state(ProductState.entering_article)
    await send_content(cb, "–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π):", reply_markup=kb_back("admin_prod"))

async def admin_product_enter_article(message: types.Message, user: User, state: FSMContext):
    article = (message.text or "").strip()
    if not article:
        await message.answer("–ê—Ä—Ç–∏–∫—É–ª –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:"); return
    async with get_session() as session:
        exists_q = await session.execute(select(Product).where(Product.article == article))
        exists = exists_q.scalar()
    if exists:
        await message.answer("–¢–∞–∫–æ–π –∞—Ä—Ç–∏–∫—É–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π:"); return
    await state.update_data(article=article)
    await state.set_state(ProductState.entering_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

async def admin_product_enter_name(message: types.Message, user: User, state: FSMContext):
    name = (message.text or "").strip()
    if not name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:"); return
    data = await state.get_data(); article = data["article"]
    text = ("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n"
            f"–ê—Ä—Ç–∏–∫—É–ª: {article}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã–π: –î–∞\n")
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data="adm_prod_confirm")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_prod")],
    ])
    await state.update_data(name=name)
    await state.set_state(ProductState.confirming)
    await message.answer(text, reply_markup=kb)

async def admin_product_confirm(cb: types.CallbackQuery, user: User, state: FSMContext):
    await cb.answer()
    data = await state.get_data()
    async with get_session() as session:
        p = Product(article=data["article"], name=data["name"], is_active=True)
        session.add(p); await session.commit()
    await state.clear()
    await send_content(cb, "‚úÖ –¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω.", reply_markup=kb_admin_prod_root())

async def admin_product_edit(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    async with get_session() as session:
        total = (await session.execute(select(func.count()).select_from(Product))).scalar_one()
        res = await session.execute(select(Product).order_by(Product.name).limit(30))
        products = res.scalars().all()
    if not products:
        await send_content(cb, "–¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç.", reply_markup=kb_admin_prod_root()); return
    await send_content(cb, f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä (–ø–µ—Ä–≤—ã–µ 30, –≤—Å–µ–≥–æ {total}):", reply_markup=kb_prod_pick(products))
    await state.set_state(ProductEditState.selecting)

async def admin_product_pick(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    try:
        _, sid = cb.data.split(":"); pid = int(sid)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True); return
    async with get_session() as session:
        q = await session.execute(select(Product).where(Product.id == pid))
        p = q.scalar()
    if not p:
        await cb.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True); return
    await state.update_data(prod_id=p.id)
    await send_content(cb, f"–¢–æ–≤–∞—Ä: {p.name} (–∞—Ä—Ç. {p.article}) active={p.is_active}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                       reply_markup=kb_prod_actions(p))

async def admin_product_rename_start(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    try:
        _, sid = cb.data.split(":"); pid = int(sid)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True); return
    await state.update_data(prod_id=pid)
    await send_content(cb, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=kb_back("admin_product_edit"))
    await state.set_state(ProductEditState.renaming)

async def admin_product_rename_apply(message: types.Message, user: User, state: FSMContext):
    data = await state.get_data()
    name = (message.text or "").strip()
    if not name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:"); return
    pid = data.get("prod_id")
    async with get_session() as session:
        await session.execute(update(Product).where(Product.id == pid).values(name=name))
        await session.commit()
    await state.clear()
    await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=kb_back("admin_product_edit"))

async def admin_product_toggle(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    try:
        _, sid = cb.data.split(":"); pid = int(sid)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True); return
    async with get_session() as session:
        q = await session.execute(select(Product).where(Product.id == pid))
        p = q.scalar()
        if not p:
            await cb.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True); return
        p.is_active = not p.is_active
        await session.commit()
    await send_content(cb, f"‚úÖ –ì–æ—Ç–æ–≤–æ. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ —Ç–µ–ø–µ—Ä—å: {'True' if p.is_active else 'False'}",
                       reply_markup=kb_admin_prod_root())

async def admin_prod_del(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    try:
        _, sid = cb.data.split(":"); pid = int(sid)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True); return

    # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–≤—è–∑–∏
    async with get_session() as session:
        mv_count = (await session.execute(
            select(func.count()).select_from(StockMovement).where(StockMovement.product_id == pid)
        )).scalar_one()
        si_count = (await session.execute(
            select(func.count()).select_from(SupplyItem).where(SupplyItem.product_id == pid)
        )).scalar_one()

    if mv_count > 0 or si_count > 0:
        await send_content(cb, "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä: –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è/–ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å—Ç–∞–≤–æ–∫.\n–í—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å.",
                           reply_markup=kb_back("admin_product_edit"))
        return

    await send_content(cb, "–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ?", reply_markup=kb_confirm("adm_prod_del", pid, "admin_product_edit"))

async def admin_prod_del_confirm(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    try:
        _, sid = cb.data.split(":"); pid = int(sid)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True); return
    async with get_session() as session:
        q = await session.execute(select(Product).where(Product.id == pid))
        p = q.scalar()
        if not p:
            await cb.answer("–¢–æ–≤–∞—Ä —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."); return
        await session.delete(p)
        await session.commit()
    await send_content(cb, "‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω.", reply_markup=kb_admin_prod_root())


# =========================
#        AUDIT LOG
# =========================
AUDIT_PAGE = 10

def _format_audit_row(row: Tuple[AuditLog, Optional[User]]) -> str:
    log, usr = row
    who = f"{usr.name} (id={usr.id})" if usr else "system"
    # –ë–µ–∑ Markdown, —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
    parts = [
        f"[{log.created_at}]",
        f"user: {who}",
        f"action: {log.action.value}",
        f"table: {log.table_name}",
        f"pk: {log.record_pk}",
    ]
    # –ö–æ—Ä–æ—Ç–∫–æ –ø–æ–∫–∞–∂–µ–º diff/old/new, –µ—Å–ª–∏ –µ—Å—Ç—å
    if log.diff:
        parts.append(f"diff: {str(log.diff)[:200]}")
    elif log.new_data and not log.old_data:
        parts.append(f"new: {str(log.new_data)[:200]}")
    elif log.old_data and not log.new_data:
        parts.append(f"old: {str(log.old_data)[:200]}")
    return " | ".join(parts)

async def admin_audit_root(cb: types.CallbackQuery, user: User, state: FSMContext, page: int = 1):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: —Å—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    async with get_session() as session:
        total = (await session.execute(select(func.count()).select_from(AuditLog))).scalar_one()

        # –í—ã–±–æ—Ä–∫–∞ —Å –¥–∂–æ–π–Ω–æ–º –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (LEFT OUTER)
        res = await session.execute(
            select(AuditLog, User)
            .join(User, User.id == AuditLog.user_id, isouter=True)
            .order_by(desc(AuditLog.id))
            .offset((page - 1) * AUDIT_PAGE)
            .limit(AUDIT_PAGE)
        )
        rows = res.all()

    if not rows:
        await send_content(cb, "–ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç.", reply_markup=kb_admin_root())
        return

    lines = [ _format_audit_row(r) for r in rows ]
    text = "–ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏):\n\n" + "\n".join(lines)

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∞–º–∏
    buttons = []
    if page > 1:
        buttons.append(InlineKeyboardButton(text="‚óÄ –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"admin_audit_page:{page-1}"))
    if page * AUDIT_PAGE < total:
        buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è ‚ñ∂", callback_data=f"admin_audit_page:{page+1}"))

    kb = InlineKeyboardMarkup(inline_keyboard=[])
    if buttons:
        kb.inline_keyboard.append(buttons)
    kb.inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin")])

    await send_content(cb, text, reply_markup=kb)

async def admin_audit_page(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    try:
        _, p = cb.data.split(":")
        page = int(p)
    except Exception:
        page = 1
    await admin_audit_root(cb, user, state, page=page)


# =========================
#    MENU VISIBILITY
# =========================
async def admin_menu_roles_root(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()

    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –¥–µ—Ñ–æ–ª—Ç–∞–º–∏
    async with get_session() as session:
        await ensure_menu_visibility_defaults(session)

    await send_content(cb, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –º–µ–Ω—é:", reply_markup=kb_menu_roles_root())

async def admin_menu_role(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    try:
        _, role_str = cb.data.split(":")
        role = UserRole(role_str)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True); return

    # —Å–æ–±–µ—Ä—ë–º —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç—É –≤–∏–¥–∏–º–æ—Å—Ç–∏
    async with get_session() as session:
        res = await session.execute(select(RoleMenuVisibility).where(RoleMenuVisibility.role == role))
        rows = res.scalars().all()
    state_map = {r.item.value: r.visible for r in rows}
    await send_content(cb, f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–Ω—é –¥–ª—è —Ä–æ–ª–∏ {role.value}:",
                       reply_markup=kb_menu_visibility(role, state_map))
# ===== –ë–≠–ö–ê–ü –ë–î =====
async def admin_backup_now(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()

    from utils.backup import make_backup_and_maybe_upload

    try:
        info = make_backup_and_maybe_upload()
    except FileNotFoundError as e:
        await send_content(cb, f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω pg_dump –∏–ª–∏ credentials: {e}", reply_markup=kb_admin_root()); return
    except Exception as e:
        await send_content(cb, f"‚ùå –û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞: {e}", reply_markup=kb_admin_root()); return

    size_mb = round(info["size"] / 1024 / 1024, 2)
    text = (
        "‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω.\n\n"
        f"–§–∞–π–ª: {os.path.basename(info['local_path'])}\n"
        f"–†–∞–∑–º–µ—Ä: {size_mb} –ú–ë\n"
        f"–õ–æ–∫–∞–ª—å–Ω–æ: {info['local_path']}\n"
    )
    if info["drive_file_id"]:
        text += f"Google Drive: {info['drive_link'] or '(—Å—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)'}\n"
    await send_content(cb, text, reply_markup=kb_admin_root())


async def admin_menu_toggle(cb: types.CallbackQuery, user: User, state: FSMContext):
    if user.role != UserRole.admin:
        await cb.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True); return
    await cb.answer()
    try:
        _, role_str, key = cb.data.split(":")
        role = UserRole(role_str)
        item = MenuItem(key)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True); return

    async with get_session() as session:
        new_flag = await toggle_menu_visibility(session, role, item)

        # –û–±–Ω–æ–≤–∏–º —ç–∫—Ä–∞–Ω —Ä–æ–ª–∏
        res = await session.execute(select(RoleMenuVisibility).where(RoleMenuVisibility.role == role))
        rows = res.scalars().all()

    state_map = {r.item.value: r.visible for r in rows}
    await send_content(cb, f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–Ω—é –¥–ª—è —Ä–æ–ª–∏ {role.value} (–æ–±–Ω–æ–≤–ª–µ–Ω–æ {item.value}: {'–≤–∫–ª' if new_flag else '–≤—ã–∫–ª'}):",
                       reply_markup=kb_menu_visibility(role, state_map))


# =========================
#     REGISTER ROUTES
# =========================
def register_admin_handlers(dp: Dispatcher):
    # –ö–æ—Ä–µ–Ω—å
    dp.callback_query.register(on_admin,                   lambda c: c.data == "admin")

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    dp.callback_query.register(admin_users_menu,           lambda c: c.data == "admin_users")
    dp.callback_query.register(admin_list_users,           lambda c: c.data == "admin_list_users")
    dp.callback_query.register(admin_delete_user,          lambda c: c.data == "admin_delete_user")
    dp.callback_query.register(admin_confirm_delete_user,  lambda c: c.data.startswith("delete_user:"))
    dp.callback_query.register(admin_send_message,         lambda c: c.data == "admin_send_message")
    dp.callback_query.register(admin_enter_message,        lambda c: c.data.startswith("send_msg:"))
    dp.message.register(admin_send_message_text,           AdminState.entering_message)

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏
    dp.callback_query.register(admin_change_role,          lambda c: c.data == "admin_change_role")
    dp.callback_query.register(admin_pick_user_for_role,   lambda c: c.data.startswith("role_user:"))
    dp.callback_query.register(admin_apply_role,           lambda c: c.data.startswith("role_set:"))

    # –°–∫–ª–∞–¥—ã
    dp.callback_query.register(admin_wh_root,              lambda c: c.data == "admin_wh")
    dp.callback_query.register(admin_wh_list,              lambda c: c.data == "admin_wh_list")
    dp.callback_query.register(admin_wh_add,               lambda c: c.data == "admin_wh_add")
    dp.message.register(admin_wh_add_apply,                WarehouseCreateState.entering_name)
    dp.callback_query.register(admin_wh_edit,              lambda c: c.data == "admin_wh_edit")
    dp.callback_query.register(admin_wh_pick,              lambda c: c.data.startswith("admin_wh_pick:"))
    dp.callback_query.register(admin_wh_rename_start,      lambda c: c.data.startswith("admin_wh_rename:"))
    dp.message.register(admin_wh_rename_apply,             WarehouseRenameState.entering_name)
    dp.callback_query.register(admin_wh_toggle,            lambda c: c.data.startswith("admin_wh_toggle:"))
    dp.callback_query.register(admin_wh_del,               lambda c: c.data.startswith("admin_wh_del:"))
    dp.callback_query.register(admin_wh_del_confirm,       lambda c: c.data.startswith("admin_wh_del_confirm:"))

    # –¢–æ–≤–∞—Ä—ã
    dp.callback_query.register(admin_prod_root,            lambda c: c.data == "admin_prod")
    dp.callback_query.register(admin_product_add,          lambda c: c.data == "admin_product_add")
    dp.message.register(admin_product_enter_article,       ProductState.entering_article)
    dp.message.register(admin_product_enter_name,          ProductState.entering_name)
    dp.callback_query.register(admin_product_confirm,      ProductState.confirming)

    dp.callback_query.register(admin_product_edit,         lambda c: c.data == "admin_product_edit")
    dp.callback_query.register(admin_product_pick,         lambda c: c.data.startswith("adm_prod_pick:"))
    dp.callback_query.register(admin_product_rename_start, lambda c: c.data.startswith("adm_prod_rename:"))
    dp.message.register(admin_product_rename_apply,        ProductEditState.renaming)
    dp.callback_query.register(admin_product_toggle,       lambda c: c.data.startswith("adm_prod_toggle:"))
    dp.callback_query.register(admin_prod_del,             lambda c: c.data.startswith("adm_prod_del:"))
    dp.callback_query.register(admin_prod_del_confirm,     lambda c: c.data.startswith("adm_prod_del_confirm:"))

    # –ñ—É—Ä–Ω–∞–ª
    dp.callback_query.register(admin_audit_root,           lambda c: c.data == "admin_audit")
    dp.callback_query.register(admin_audit_page,           lambda c: c.data.startswith("admin_audit_page:"))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–Ω—é
    dp.callback_query.register(admin_menu_roles_root,      lambda c: c.data == "adm_menu_roles")
    dp.callback_query.register(admin_menu_role,            lambda c: c.data.startswith("adm_menu_role:"))
    dp.callback_query.register(admin_menu_toggle,          lambda c: c.data.startswith("adm_menu_toggle:"))
    dp.callback_query.register(admin_backup_now,           lambda c: c.data == "admin_backup_now")
