# handlers/reports.py
from aiogram import Dispatcher, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy import select, func, and_
from sqlalchemy.orm import aliased

from database.db import get_session
from database.models import User, Warehouse, Product, StockMovement, ProductStage
from handlers.common import send_content
from keyboards.inline import warehouses_kb, products_page_kb

PAGE_SIZE_REPORTS = 15


# ===== FSM =====
class ReportState(StatesGroup):
    warehouse_selected = State()  # –¥–µ—Ä–∂–∏–º wh_id –∏ wh_name
    choosing_article = State()


# ===== –û–±—â–∏–µ –ø–æ–º–æ—â–Ω–∏–∫–∏ =====
def split_message(text: str, max_len: int = 4000) -> list[str]:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ —Å—Ç—Ä–æ–∫–∞–º, —á—Ç–æ–±—ã –Ω–µ —É–ø–µ—Ä–µ—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç –¢–µ–ª–µ–≥—Ä–∞–º–∞."""
    parts = []
    while len(text) > max_len:
        split_at = text.rfind('\n', 0, max_len)
        if split_at == -1:
            split_at = max_len
        parts.append(text[:split_at].strip())
        text = text[split_at:].strip()
    if text:
        parts.append(text)
    return parts


def kb_reports_root():
    """–ö–æ—Ä–µ–Ω—å —Ä–∞–∑–¥–µ–ª–∞ ¬´–û—Ç—á—ë—Ç—ã¬ª."""
    kb = [
        [types.InlineKeyboardButton(text="üì¶ –û—Å—Ç–∞—Ç–∫–∏ –ø–æ —Å–∫–ª–∞–¥—É", callback_data="rep_view")],
        # –∑–¥–µ—Å—å –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –≤–∏–¥—ã –æ—Ç—á—ë—Ç–æ–≤
    ]
    kb.append([types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])
    return types.InlineKeyboardMarkup(inline_keyboard=kb)


def kb_report_type():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á—ë—Ç–∞ –≤–Ω—É—Ç—Ä–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞."""
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üìä –û—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º", callback_data="rep_all")],
        [types.InlineKeyboardButton(text="üéÅ –£–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏", callback_data="rep_packed")],
        [types.InlineKeyboardButton(text="üîç –û—Ç—á—ë—Ç –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É", callback_data="rep_article")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–∫–ª–∞–¥–∞–º", callback_data="rep_back_to_wh")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –í —Ä–∞–∑–¥–µ–ª ¬´–û—Ç—á—ë—Ç—ã¬ª", callback_data="reports")],
    ])


# ===== –ö–æ—Ä–µ–Ω—å ¬´–û—Ç—á—ë—Ç—ã¬ª =====
async def reports_root(cb: types.CallbackQuery, user: User, state: FSMContext):
    await cb.answer()
    await state.clear()
    await send_content(
        cb,
        "–†–∞–∑–¥–µ–ª ¬´–û—Ç—á—ë—Ç—ã¬ª. –ß—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å?",
        reply_markup=kb_reports_root(),
    )


# ===== –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Å—Ç–∞—Ç–∫–æ–≤: –≤—ã–±–æ—Ä —Å–∫–ª–∞–¥–∞ =====
async def rep_view(cb: types.CallbackQuery, user: User, state: FSMContext):
    await cb.answer()
    await state.clear()

    async with get_session() as session:
        res = await session.execute(
            select(Warehouse).where(Warehouse.is_active == True).order_by(Warehouse.name)
        )
        warehouses = res.scalars().all()
    if not warehouses:
        await send_content(cb, "üö´ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤.")
        return

    await send_content(
        cb,
        "üè¨ –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –¥–ª—è –æ—Ç—á—ë—Ç–∞ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º:",
        reply_markup=warehouses_kb(warehouses, prefix="rep_wh"),
    )


# ===== –í—ã–±–æ—Ä —Å–∫–ª–∞–¥–∞ -> –º–µ–Ω—é —Ç–∏–ø–∞ –æ—Ç—á—ë—Ç–∞ =====
async def rep_pick_warehouse(cb: types.CallbackQuery, user: User, state: FSMContext):
    if not cb.data.startswith("rep_wh:"):
        return
    await cb.answer()

    wh_id = int(cb.data.split(":")[1])
    async with get_session() as session:
        warehouse = await session.get(Warehouse, wh_id)
        if not warehouse or not warehouse.is_active:
            await send_content(cb, "üö´ –°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
            return

    await state.set_state(ReportState.warehouse_selected)
    await state.update_data(wh_id=wh_id, wh_name=warehouse.name)
    await send_content(
        cb,
        f"üè¨ –°–∫–ª–∞–¥: *{warehouse.name}*. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:",
        reply_markup=kb_report_type(),
        parse_mode="Markdown",
    )


# ===== –û—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º =====
async def rep_all(cb: types.CallbackQuery, user: User, state: FSMContext):
    await cb.answer()
    data = await state.get_data()
    wh_id = data.get('wh_id')
    wh_name = data.get('wh_name')
    if not wh_id:
        await send_content(cb, "‚ùó –û—à–∏–±–∫–∞: —Å–∫–ª–∞–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return

    SM = aliased(StockMovement)
    async with get_session() as session:
        res = await session.execute(
            select(
                Product.article,
                Product.name,
                func.sum(SM.qty).label("balance")
            )
            .join(SM, and_(SM.product_id == Product.id, SM.warehouse_id == wh_id))
            .where(Product.is_active == True)
            .group_by(Product.id)
            .having(func.sum(SM.qty) > 0)
            .order_by(Product.article)
        )
        rows = res.all()

    if not rows:
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∏–ø–∞–º –æ—Ç—á—ë—Ç–∞", callback_data="rep_back_to_types")],
            [types.InlineKeyboardButton(text="üè¨ –í—ã–±–æ—Ä —Å–∫–ª–∞–¥–∞", callback_data="rep_back_to_wh")],
        ])
        await send_content(
            cb,
            f"üìâ –ù–∞ —Å–∫–ª–∞–¥–µ *{wh_name}* —Å–µ–π—á–∞—Å –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–æ–º.\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø –æ—Ç—á—ë—Ç–∞ –∏–ª–∏ —Å–∫–ª–∞–¥.",
            parse_mode="Markdown",
            reply_markup=kb,
        )
        return

    total_items = len(rows)
    total_balance = sum(row.balance for row in rows)
    lines = [f"üîπ `{row.article}` ‚Äî *{row.name}*: **{row.balance}** —à—Ç." for row in rows]
    text = (
            f"üìä **–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ {wh_name}** ‚Äî —Ç–æ–≤–∞—Ä—ã —Å –æ—Å—Ç–∞—Ç–∫–æ–º:\n\n"
            + "\n\n".join(lines)
            + f"\n\nüìà **–ò—Ç–æ–≥–æ:** {total_items} —Ç–æ–≤–∞—Ä–æ–≤, —Å—É–º–º–∞—Ä–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: **{total_balance}** —à—Ç."
    )
    for i, part in enumerate(split_message(text), 1):
        if len(split_message(text)) > 1:
            part = f"–ß–∞—Å—Ç—å {i}/{len(split_message(text))}:\n\n{part}"
        await cb.message.answer(part, parse_mode="Markdown")

    kb_back = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∏–ø–∞–º –æ—Ç—á—ë—Ç–∞", callback_data="rep_back_to_types")],
    ])
    await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_back)


# ===== –û—Ç—á—ë—Ç –æ–± —É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö =====
async def rep_packed(cb: types.CallbackQuery, user: User, state: FSMContext):
    await cb.answer()
    data = await state.get_data()
    wh_id = data.get('wh_id')
    wh_name = data.get('wh_name')
    if not wh_id:
        await send_content(cb, "‚ùó –û—à–∏–±–∫–∞: —Å–∫–ª–∞–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return

    SM = aliased(StockMovement)
    async with get_session() as session:
        res = await session.execute(
            select(
                Product.article,
                Product.name,
                func.sum(SM.qty).label("balance")
            )
            .join(SM, and_(
                SM.product_id == Product.id,
                SM.warehouse_id == wh_id,
                SM.stage == ProductStage.packed
            ))
            .where(Product.is_active == True)
            .group_by(Product.id)
            .having(func.sum(SM.qty) > 0)
            .order_by(Product.article)
        )
        rows = res.all()

    if not rows:
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∏–ø–∞–º –æ—Ç—á—ë—Ç–∞", callback_data="rep_back_to_types")],
            [types.InlineKeyboardButton(text="üè¨ –í—ã–±–æ—Ä —Å–∫–ª–∞–¥–∞", callback_data="rep_back_to_wh")],
        ])
        await send_content(
            cb,
            f"üì≠ –ù–∞ —Å–∫–ª–∞–¥–µ *{wh_name}* –Ω–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤.",
            parse_mode="Markdown",
            reply_markup=kb,
        )
        return

    total_items = len(rows)
    total_balance = sum(row.balance for row in rows)
    lines = [f"üéÅ `{row.article}` ‚Äî *{row.name}*: **{row.balance}** —à—Ç." for row in rows]
    text = (
            f"üéÅ **–£–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ {wh_name}**\n\n"
            + "\n\n".join(lines)
            + f"\n\nüìà **–ò—Ç–æ–≥–æ:** {total_items} —Ç–æ–≤–∞—Ä–æ–≤, —É–ø–∞–∫–æ–≤–∞–Ω–æ: **{total_balance}** —à—Ç."
    )
    for i, part in enumerate(split_message(text), 1):
        if len(split_message(text)) > 1:
            part = f"–ß–∞—Å—Ç—å {i}/{len(split_message(text))}:\n\n{part}"
        await cb.message.answer(part, parse_mode="Markdown")

    kb_back = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∏–ø–∞–º –æ—Ç—á—ë—Ç–∞", callback_data="rep_back_to_types")],
    ])
    await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_back)


# ===== –û—Ç—á—ë—Ç –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É (—Å–ø–∏—Å–æ–∫) =====
async def rep_article(cb: types.CallbackQuery, user: User, state: FSMContext):
    await cb.answer()
    await state.set_state(ReportState.choosing_article)
    await rep_articles_page(cb, user, state, page=1)


async def rep_articles_page(cb: types.CallbackQuery, user: User, state: FSMContext, page: int = 1):
    data = await state.get_data()
    wh_id = data.get('wh_id')
    if not wh_id:
        await send_content(cb, "‚ùó –û—à–∏–±–∫–∞: —Å–∫–ª–∞–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return

    async with get_session() as session:
        # total –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
        subq = (
            select(Product.id)
            .join(StockMovement, StockMovement.product_id == Product.id)
            .where(Product.is_active == True, StockMovement.warehouse_id == wh_id)
            .group_by(Product.id)
            .having(func.sum(StockMovement.qty) > 0)
            .subquery()
        )
        total = await session.scalar(select(func.count()).select_from(subq))

        # —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        res = await session.execute(
            select(Product)
            .join(StockMovement, StockMovement.product_id == Product.id)
            .where(Product.is_active == True, StockMovement.warehouse_id == wh_id)
            .group_by(Product.id)
            .having(func.sum(StockMovement.qty) > 0)
            .order_by(Product.article)
            .offset((page - 1) * PAGE_SIZE_REPORTS)
            .limit(PAGE_SIZE_REPORTS)
        )
        products = res.scalars().all()

    if not products:
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∏–ø–∞–º –æ—Ç—á—ë—Ç–∞", callback_data="rep_back_to_types")],
            [types.InlineKeyboardButton(text="üè¨ –í—ã–±–æ—Ä —Å–∫–ª–∞–¥–∞", callback_data="rep_back_to_wh")],
        ])
        await send_content(
            cb,
            "üìâ –ù–∞ —ç—Ç–æ–º —Å–∫–ª–∞–¥–µ —Å–µ–π—á–∞—Å –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–æ–º.\n\n"
            "–í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø –æ—Ç—á—ë—Ç–∞ –∏–ª–∏ —Å–∫–ª–∞–¥.",
            parse_mode="Markdown",
            reply_markup=kb,
        )
        return

    kb = products_page_kb(
        products=products,
        page=page,
        page_size=PAGE_SIZE_REPORTS,
        total=total,
        back_to="rep_back_to_types",
        item_prefix="rep_art",
        page_prefix="rep_art_page",
    )

    await send_content(cb, "üîç –í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –æ—Ç—á—ë—Ç–∞:", reply_markup=kb)


# ===== –í—ã–±–æ—Ä –∞—Ä—Ç–∏–∫—É–ª–∞ -> –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ –Ω–µ–º—É =====
async def rep_pick_article(cb: types.CallbackQuery, user: User, state: FSMContext):
    if not cb.data.startswith("rep_art:"):
        return
    await cb.answer()

    product_id = int(cb.data.split(":")[1])
    data = await state.get_data()
    wh_id = data.get('wh_id')
    wh_name = data.get('wh_name')
    if not wh_id:
        await send_content(cb, "‚ùó –û—à–∏–±–∫–∞: —Å–∫–ª–∞–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return

    SM = aliased(StockMovement)
    async with get_session() as session:
        product = await session.get(Product, product_id)
        if not product or not product.is_active:
            await send_content(cb, "üö´ –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
            return

        balance = await session.scalar(
            select(func.coalesce(func.sum(SM.qty), 0))
            .where(SM.product_id == product_id, SM.warehouse_id == wh_id)
        )

    text = (
        f"üìä **–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ {wh_name}**\n\n"
        f"üîπ –ê—Ä—Ç–∏–∫—É–ª: `{product.article}`\n"
        f"üì¶ –¢–æ–≤–∞—Ä: *{product.name}*\n"
        f"‚û°Ô∏è –û—Å—Ç–∞—Ç–æ–∫: **{balance}** —à—Ç."
    )
    await send_content(cb, text, parse_mode="Markdown")

    kb_back = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞—Ä—Ç–∏–∫—É–ª–∞–º", callback_data="rep_article")],
    ])
    await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_back)


# ===== –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥ =====
async def rep_back_to_types(cb: types.CallbackQuery, user: User, state: FSMContext):
    await cb.answer()
    data = await state.get_data()
    wh_name = data.get('wh_name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
    await send_content(
        cb,
        f"üè¨ –°–∫–ª–∞–¥: *{wh_name}*. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:",
        reply_markup=kb_report_type(),
        parse_mode="Markdown",
    )


async def rep_articles_page_handler(cb: types.CallbackQuery, user: User, state: FSMContext):
    if not cb.data.startswith("rep_art_page:"):
        return
    page = int(cb.data.split(":")[1])
    await rep_articles_page(cb, user, state, page=page)


async def rep_back_to_warehouses(cb: types.CallbackQuery, user: User, state: FSMContext):
    await cb.answer()
    await state.clear()

    async with get_session() as session:
        res = await session.execute(
            select(Warehouse).where(Warehouse.is_active == True).order_by(Warehouse.name)
        )
        warehouses = res.scalars().all()

    if not warehouses:
        await send_content(cb, "üö´ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤.")
        return

    await send_content(
        cb,
        "üè¨ –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥:",
        reply_markup=warehouses_kb(warehouses, prefix="rep_wh"),
    )


# ===== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è =====
def register_reports_handlers(dp: Dispatcher):
    # –ö–æ—Ä–µ–Ω—å —Ä–∞–∑–¥–µ–ª–∞
    dp.callback_query.register(reports_root, lambda c: c.data == "reports")

    # –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Å—Ç–∞—Ç–∫–æ–≤ (—á–µ—Ä–µ–∑ –æ—Ç—á—ë—Ç—ã)
    dp.callback_query.register(rep_view,           lambda c: c.data == "rep_view")
    dp.callback_query.register(rep_pick_warehouse, lambda c: c.data.startswith("rep_wh:"))

    # –¢–∏–ø—ã –æ—Ç—á—ë—Ç–æ–≤
    dp.callback_query.register(rep_all,    lambda c: c.data == "rep_all")
    dp.callback_query.register(rep_packed, lambda c: c.data == "rep_packed")
    dp.callback_query.register(rep_article, lambda c: c.data == "rep_article")

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∏ –≤—ã–±–æ—Ä –∞—Ä—Ç–∏–∫—É–ª–∞
    dp.callback_query.register(rep_articles_page_handler, lambda c: c.data.startswith("rep_art_page:"))
    dp.callback_query.register(rep_pick_article,          lambda c: c.data.startswith("rep_art:"))

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥
    dp.callback_query.register(rep_back_to_types,      lambda c: c.data == "rep_back_to_types")
    dp.callback_query.register(rep_back_to_warehouses, lambda c: c.data == "rep_back_to_wh")
