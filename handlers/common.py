# handlers/common.py
import contextlib
import logging
from types import SimpleNamespace
from typing import Dict, Optional

from aiogram import Dispatcher, types, BaseMiddleware, Bot, Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select

from config import ADMIN_TELEGRAM_ID
from keyboards.main_menu import get_main_menu
from database.db import get_session, set_audit_user, init_db
from database.models import User, UserRole

# –ü–∞–º—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞ (–ª–æ–∫–∞–ª—å–Ω–æ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –±–æ—Ç–∞)
pending_requests: Dict[int, str] = {}
last_content_msg: Dict[int, int] = {}


# ---------------------------
# UI helpers
# ---------------------------
def _kb_emergency_root() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíæ –ë—ç–∫–∞–ø—ã / –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", callback_data="admin:backup")],
        [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="noop")],
    ])


async def send_content(
        cb: types.CallbackQuery,
        text: str,
        reply_markup: Optional[InlineKeyboardMarkup] = None,
        parse_mode: Optional[str] = None,
):
    """
    –£–¥–∞–ª—è–µ–º –ø—Ä–æ—à–ª—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî –Ω–∏–∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    uid = cb.from_user.id
    mid = last_content_msg.get(uid)
    if mid:
        with contextlib.suppress(Exception):
            await cb.bot.delete_message(chat_id=cb.message.chat.id, message_id=mid)

    if parse_mode:
        m = await cb.message.answer(text, reply_markup=reply_markup, parse_mode=parse_mode)
    else:
        m = await cb.message.answer(text, reply_markup=reply_markup)

    last_content_msg[uid] = m.message_id


def _is_emergency_allowed(event: types.TelegramObject) -> bool:
    """
    –í –∞–≤–∞—Ä–∏–π–Ω–æ–º —Ä–µ–∂–∏–º–µ (–Ω–µ—Ç –ë–î/–Ω–µ—Ç –∑–∞–ø–∏—Å–∏ admin) —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ:
      ‚Ä¢ —ç–∫—Ä–∞–Ω –±—ç–∫–∞–ø–æ–≤ (admin:backup)
      ‚Ä¢ –≤—Å–µ —à–∞–≥–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è/–±—ç–∫–∞–ø–∞ (bk:*)
      ‚Ä¢ –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω—É–∂–Ω—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã)
    """
    if isinstance(event, types.CallbackQuery):
        data = event.data or ""
        return data == "admin:backup" or data.startswith("bk:")
    if isinstance(event, types.Message):
        return True
    return False


# ---------------------------
# Middleware —Å –∞–≤–∞—Ä–∏–π–Ω—ã–º —Ä–µ–∂–∏–º–æ–º
# ---------------------------
class RoleCheckMiddleware(BaseMiddleware):
    """
    /start ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ–º.

    –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:
      ‚Ä¢ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î ‚Äî –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º;
      ‚Ä¢ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ —ç—Ç–æ ADMIN_TELEGRAM_ID ‚Äî
          –≤–∫–ª—é—á–∞–µ–º –∞–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¢–û–õ–¨–ö–û –±—ç–∫–∞–ø—ã/restore;
      ‚Ä¢ –Ω–µ –∞–¥–º–∏–Ω ‚Äî –ø—Ä–æ—Å–∏–º /start, –ª–∏–±–æ —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.
    """
    async def __call__(self, handler, event, data: dict):
        # /start ‚Äî –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ
        if isinstance(event, types.Message) and event.text and event.text.startswith("/start"):
            set_audit_user(None)
            return await handler(event, data)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ Message/CallbackQuery
        if not isinstance(event, (types.Message, types.CallbackQuery)):
            set_audit_user(None)
            return await handler(event, data)

        user_id = event.from_user.id

        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (–µ—Å–ª–∏ –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞)
        user: Optional[User] = None
        db_ok = True
        try:
            async with get_session() as session:
                res = await session.execute(select(User).where(User.telegram_id == user_id))
                user = res.scalar()
        except Exception:
            db_ok = False
            user = None

        # –ù–∞—à—ë–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
        if user is not None:
            data["user"] = user
            set_audit_user(user.id)
            return await handler(event, data)

        # –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –µ—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω ‚Äî –∞–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º (—Ç–æ–ª—å–∫–æ –±—ç–∫–∞–ø—ã)
        if user_id == ADMIN_TELEGRAM_ID:
            fallback_admin = SimpleNamespace(
                id=None, telegram_id=user_id, name="Emergency Admin", role=UserRole.admin
            )
            data["user"] = fallback_admin
            data["emergency"] = True
            set_audit_user(None)

            if _is_emergency_allowed(event):
                return await handler(event, data)
            else:
                msg = "–ê–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º: –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—è ¬´–ë—ç–∫–∞–ø—ã/–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ¬ª. –û—Ç–∫—Ä–æ–π—Ç–µ —ç–∫—Ä–∞–Ω –±—ç–∫–∞–ø–æ–≤."
                if isinstance(event, types.Message):
                    await event.answer(msg, reply_markup=_kb_emergency_root())
                else:
                    await event.message.answer(msg, reply_markup=_kb_emergency_root())
                return

        # –ù–µ –∞–¥–º–∏–Ω: –ª–∏–±–æ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ª–∏–±–æ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ ‚Äî –ø—Ä–æ—Å–∏–º /start
        set_audit_user(None)
        text = "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ." if not db_ok else "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start."
        if isinstance(event, types.Message):
            await event.answer(text)
        else:
            await event.message.answer(text)
        return


# ---------------------------
# /start: —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –±—É—Ç—Å—Ç—Ä–∞–ø–æ–º –∞–¥–º–∏–Ω–∞
# ---------------------------
async def cmd_start(message: types.Message, bot: Bot):
    user_id = message.from_user.id

    # 1) –ê–¥–º–∏–Ω: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–Ω—è—Ç—å —Å—Ö–µ–º—É –∏ —Å–∞–º–æ–∑–∞–≤–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å –∞–¥–º–∏–Ω–∞.
    if user_id == ADMIN_TELEGRAM_ID:
        try:
            # –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—Å—Ç
            await init_db()
        except Exception:
            pass

        try:
            async with get_session() as session:
                res = await session.execute(select(User).where(User.telegram_id == user_id))
                admin_user = res.scalar()
                if not admin_user:
                    admin_user = User(
                        telegram_id=user_id,
                        name=message.from_user.full_name or "Admin",
                        role=UserRole.admin,
                        password_hash="bootstrap",
                    )
                    session.add(admin_user)
                    await session.commit()

            set_audit_user(admin_user.id)
            await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=await get_main_menu(UserRole.admin))
            return

        except Exception:
            # –°—Ö–µ–º–∞/–ë–î –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–≤–∞—Ä–∏–π–Ω–æ–µ –º–µ–Ω—é
            set_audit_user(None)
            await message.answer(
                "–ê–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º: –±–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ ¬´–ë—ç–∫–∞–ø—ã/–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ¬ª.",
                reply_markup=_kb_emergency_root(),
            )
            return

    # 2) –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    try:
        async with get_session() as session:
            res = await session.execute(select(User).where(User.telegram_id == user_id))
            user = res.scalar()
    except Exception:
        user = None

    if user:
        set_audit_user(user.id)
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=await get_main_menu(user.role))
        return

    # –ó–∞—è–≤–∫–∞ –∞–¥–º–∏–Ω—É
    set_audit_user(None)
    pending_requests[user_id] = message.from_user.full_name or str(user_id)
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å",  callback_data=f"approve:{user_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{user_id}"),
    ]])
    with contextlib.suppress(Exception):
        await bot.send_message(
            ADMIN_TELEGRAM_ID,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} (@{message.from_user.username or '–±–µ–∑ username'}) –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ—Å—Ç—É–ø.",
            reply_markup=kb,
        )
    await message.answer("–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.")


# ---------------------------
# Approve / Reject
# ---------------------------
async def handle_admin_decision(cb: types.CallbackQuery, bot: Bot):
    try:
        action, uid_str = cb.data.split(":")
        uid = int(uid_str)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return

    if cb.from_user.id != ADMIN_TELEGRAM_ID:
        await cb.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return
    if uid not in pending_requests:
        await cb.answer("–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    if action == "approve":
        # –ù–∞ —Å–ª—É—á–∞–π wipe ‚Äî –ø–æ–¥–Ω–∏–º–µ–º —Å—Ö–µ–º—É –∏ —Å–æ—Ö—Ä–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with contextlib.suppress(Exception):
            await init_db()

        async with get_session() as session:
            new_user = User(
                telegram_id=uid,
                name=pending_requests[uid],
                role=UserRole.user,
                password_hash="approved",
            )
            session.add(new_user)
            await session.commit()
        with contextlib.suppress(Exception):
            await bot.send_message(uid, "–í–∞—Å –¥–æ–±–∞–≤–∏–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É! –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≤—Ö–æ–¥–∞.")
        await cb.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        with contextlib.suppress(Exception):
            await bot.send_message(uid, "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
        await cb.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

    pending_requests.pop(uid, None)


# ---------------------------
# –†–∞–∑–¥–µ–ª—ã-–∑–∞–≥–ª—É—à–∫–∏ (–µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)
# ---------------------------
async def on_ostatki(cb: types.CallbackQuery, user: User):
    await cb.answer()
    await send_content(cb, "¬´–û—Å—Ç–∞—Ç–∫–∏¬ª: –º–æ–¥—É–ª—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def on_prihod(cb: types.CallbackQuery, user: User):
    await cb.answer()
    await send_content(cb, "¬´–ü—Ä–∏—Ö–æ–¥ —Ç–æ–≤–∞—Ä–∞¬ª: –º–æ–¥—É–ª—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def on_korr_ost(cb: types.CallbackQuery, user: User):
    await cb.answer()
    await send_content(cb, "¬´–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤¬ª: –º–æ–¥—É–ª—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def on_postavki(cb: types.CallbackQuery, user: User):
    await cb.answer()
    await send_content(cb, "¬´–ü–æ—Å—Ç–∞–≤–∫–∏¬ª: –º–æ–¥—É–ª—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def on_otchety(cb: types.CallbackQuery, user: User):
    await cb.answer()
    await send_content(cb, "¬´–û—Ç—á—ë—Ç—ã¬ª: –º–æ–¥—É–ª—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def back_to_main_menu(cb: types.CallbackQuery, user: User, state: FSMContext):
    await cb.answer()
    if state:
        await state.clear()
    await cb.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=await get_main_menu(user.role))


# ---------------------------
# NOOP router (–∑–∞–∫—Ä—ã—Ç—å "—á–∞—Å–∏–∫–∏")
# ---------------------------
noop_router = Router()

@noop_router.callback_query(F.data == "noop")
async def noop_cb(cb: types.CallbackQuery):
    await cb.answer()


# ---------------------------
# Register
# ---------------------------
def register_common_handlers(dp: Dispatcher):
    dp.message.register(cmd_start, CommandStart())
    dp.callback_query.register(handle_admin_decision, lambda c: c.data.startswith(("approve:", "reject:")))

    dp.callback_query.register(on_ostatki,  lambda c: c.data == "ostatki")
    dp.callback_query.register(on_prihod,   lambda c: c.data == "prihod")
    dp.callback_query.register(on_korr_ost, lambda c: c.data == "korr_ost")
    dp.callback_query.register(on_postavki, lambda c: c.data == "postavki")
    dp.callback_query.register(on_otchety,  lambda c: c.data == "otchety")
    dp.callback_query.register(back_to_main_menu, lambda c: c.data == "back_to_menu")

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º noop –ü–û–°–õ–ï–î–ù–ò–ú
    dp.include_router(noop_router)
