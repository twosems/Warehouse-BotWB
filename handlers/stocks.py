# handlers/stocks.py
from aiogram import Dispatcher, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy import select, func, and_
from sqlalchemy.orm import aliased

from database.db import get_session
from database.models import User, Warehouse, Product, StockMovement
from handlers.common import send_content
from keyboards.inline import warehouses_kb, products_page_kb


PAGE_SIZE_STOCKS = 15


class StockReportState(StatesGroup):
    warehouse_selected = State()  # –•—Ä–∞–Ω–∏–º wh_id –∏ wh_name
    choosing_article = State()


def kb_stocks_root():
    kb = [[types.InlineKeyboardButton(text="üì¶ –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Å—Ç–∞—Ç–∫–æ–≤", callback_data="stocks_view")]]
    kb.append([types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])
    return types.InlineKeyboardMarkup(inline_keyboard=kb)


async def stocks_root(cb: types.CallbackQuery, user: User, state: FSMContext):
    await cb.answer()
    await state.clear()
    await send_content(cb, "–û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                       reply_markup=kb_stocks_root())


def kb_report_type():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥."""
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üìä –û—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º", callback_data="report_all")],
        [types.InlineKeyboardButton(text="üîç –û—Ç—á–µ—Ç –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É", callback_data="report_article")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–∫–ª–∞–¥–∞–º", callback_data="stocks_back_to_wh")],
    ])


def split_message(text: str, max_len: int = 4000) -> list[str]:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º, —Å –∑–∞–ø–∞—Å–æ–º."""
    parts = []
    while len(text) > max_len:
        split_at = text.rfind('\n', 0, max_len)
        if split_at == -1:
            split_at = max_len
        parts.append(text[:split_at].strip())
        text = text[split_at:].strip()
    if text:
        parts.append(text)
    return parts


# ===== –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Å—Ç–∞—Ç–∫–æ–≤: –≤—ã–±–æ—Ä —Å–∫–ª–∞–¥–∞ =====
async def stocks_view(cb: types.CallbackQuery, user: User, state: FSMContext):
    await cb.answer()
    await state.clear()

    async with get_session() as session:
        res = await session.execute(
            select(Warehouse).where(Warehouse.is_active == True).order_by(Warehouse.name)
        )
        warehouses = res.scalars().all()
    if not warehouses:
        await send_content(cb, "üö´ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤.")
        return

    await send_content(cb, "üè¨ –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤:",
                       reply_markup=warehouses_kb(warehouses, prefix="pr_wh"))
#                      reply_markup=warehouses_kb(warehouses))


# ===== –í—ã–±–æ—Ä —Å–∫–ª–∞–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ -> –º–µ–Ω—é —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞ =====
async def pick_warehouse_for_view(cb: types.CallbackQuery, user: User, state: FSMContext):
    if not cb.data.startswith("pr_wh:"):
        return
    await cb.answer()

    wh_id = int(cb.data.split(":")[1])
    async with get_session() as session:
        warehouse = await session.get(Warehouse, wh_id)
        if not warehouse or not warehouse.is_active:
            await send_content(cb, "üö´ –°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
            return

    await state.set_state(StockReportState.warehouse_selected)
    await state.update_data(wh_id=wh_id, wh_name=warehouse.name)
    await send_content(cb, f"üè¨ –°–∫–ª–∞–¥: *{warehouse.name}*. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
                       reply_markup=kb_report_type())


# ===== –û—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º =====
async def report_all(cb: types.CallbackQuery, user: User, state: FSMContext):
    await cb.answer()
    data = await state.get_data()
    wh_id = data.get('wh_id')
    wh_name = data.get('wh_name')
    if not wh_id:
        await send_content(cb, "‚ùó –û—à–∏–±–∫–∞: —Å–∫–ª–∞–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return

    SM = aliased(StockMovement)
    async with get_session() as session:
        res = await session.execute(
            select(
                Product.article,
                Product.name,
                func.sum(SM.qty).label("balance")
            )
            .join(SM, and_(SM.product_id == Product.id, SM.warehouse_id == wh_id))
            .where(Product.is_active == True)
            .group_by(Product.id)
            .having(func.sum(SM.qty) > 0)
            .order_by(Product.article)
        )
        rows = res.all()

    if not rows:
        await send_content(cb, f"üìâ –ù–∞ —Å–∫–ª–∞–¥–µ *{wh_name}* –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ > 0.")
        return

    total_items = len(rows)
    total_balance = sum(row.balance for row in rows)
    lines = [f"üîπ `{row.article}` - *{row.name}*: **{row.balance}** —à—Ç." for row in rows]
    text = (
            f"üìä **–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ {wh_name}** (—Ç–æ–≤–∞—Ä—ã —Å –æ—Å—Ç–∞—Ç–∫–æ–º > 0):\n\n"
            + "\n\n".join(lines) + f"\n\nüìà **–ò—Ç–æ–≥–æ:** {total_items} —Ç–æ–≤–∞—Ä–æ–≤, —Å—É–º–º–∞—Ä–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: **{total_balance}** —à—Ç."
    )
    parts = split_message(text)

    for i, part in enumerate(parts, 1):
        if len(parts) > 1:
            part = f"–ß–∞—Å—Ç—å {i}/{len(parts)}:\n\n{part}"
        await cb.message.answer(part, parse_mode="Markdown")

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    kb_back = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∏–ø–∞–º –æ—Ç—á–µ—Ç–∞", callback_data="back_to_report_type")],
    ])
    await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_back)


# ===== –û—Ç—á–µ—Ç –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É: –ø–æ–∫–∞–∑ –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ =====
async def report_article(cb: types.CallbackQuery, user: User, state: FSMContext):
    await cb.answer()
    await state.set_state(StockReportState.choosing_article)
    await report_articles_page(cb, user, state, page=1)


async def report_articles_page(cb: types.CallbackQuery, user: User, state: FSMContext, page: int = 1):
    data = await state.get_data()
    wh_id = data.get('wh_id')
    if not wh_id:
        await send_content(cb, "‚ùó –û—à–∏–±–∫–∞: —Å–∫–ª–∞–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return

    async with get_session() as session:
        # Total: —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å balance > 0
        subq = select(Product.id).join(StockMovement, StockMovement.product_id == Product.id).where(
            Product.is_active == True, StockMovement.warehouse_id == wh_id
        ).group_by(Product.id).having(func.sum(StockMovement.qty) > 0).subquery()
        total_stmt = select(func.count()).select_from(subq)
        total = await session.scalar(total_stmt)

        # –°–ø–∏—Å–æ–∫: —Ç–æ–≤–∞—Ä—ã —Å balance > 0
        res = await session.execute(
            select(Product)
            .join(StockMovement, StockMovement.product_id == Product.id)
            .where(Product.is_active == True, StockMovement.warehouse_id == wh_id)
            .group_by(Product.id)
            .having(func.sum(StockMovement.qty) > 0)
            .order_by(Product.article)
            .offset((page - 1) * PAGE_SIZE_STOCKS)
            .limit(PAGE_SIZE_STOCKS)
        )
        products = res.scalars().all()

    if not products:
        await send_content(cb, "üìâ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ > 0.")
        return

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–µ–∑ "–û—Ç–º–µ–Ω–∞", —Å "–ù–∞–∑–∞–¥"
    kb = products_page_kb(products, page, PAGE_SIZE_STOCKS, total, back_to="back_to_report_type")
    # –ü–æ–¥–º–µ–Ω—è–µ–º callback_data –∏ —É–±–∏—Ä–∞–µ–º "–û—Ç–º–µ–Ω–∞"
    for row in kb.inline_keyboard:
        for btn in row[:]:  # –ö–æ–ø–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            if btn.callback_data and btn.callback_data.startswith("pr_prod:"):
                btn.callback_data = btn.callback_data.replace("pr_prod:", "report_art:")
            elif btn.callback_data and btn.callback_data.startswith("pr_prod_page:"):
                btn.callback_data = btn.callback_data.replace("pr_prod_page:", "report_art_page:")
            elif btn.text == "‚ùå –û—Ç–º–µ–Ω–∞":
                row.remove(btn)

    await send_content(cb, "üîç –í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –æ—Ç—á–µ—Ç–∞:", reply_markup=kb)


# ===== –í—ã–±–æ—Ä –∞—Ä—Ç–∏–∫—É–ª–∞ -> –ø–æ–∫–∞–∑ –æ—Å—Ç–∞—Ç–∫–∞ =====
async def pick_article(cb: types.CallbackQuery, user: User, state: FSMContext):
    if not cb.data.startswith("report_art:"):
        return
    await cb.answer()

    product_id = int(cb.data.split(":")[1])
    data = await state.get_data()
    wh_id = data.get('wh_id')
    wh_name = data.get('wh_name')
    if not wh_id:
        await send_content(cb, "‚ùó –û—à–∏–±–∫–∞: —Å–∫–ª–∞–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return

    SM = aliased(StockMovement)
    async with get_session() as session:
        product = await session.get(Product, product_id)
        if not product or not product.is_active:
            await send_content(cb, "üö´ –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
            return

        balance = await session.scalar(
            select(func.coalesce(func.sum(SM.qty), 0))
            .where(SM.product_id == product_id, SM.warehouse_id == wh_id)
        )

    text = (
        f"üìä **–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ {wh_name}**\n\n"
        f"üîπ –ê—Ä—Ç–∏–∫—É–ª: `{product.article}`\n"
        f"üì¶ –¢–æ–≤–∞—Ä: *{product.name}*\n"
        f"‚û°Ô∏è –û—Å—Ç–∞—Ç–æ–∫: **{balance}** —à—Ç."
    )

    await send_content(cb, text, parse_mode="Markdown")

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    kb_back = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞—Ä—Ç–∏–∫—É–ª–∞–º", callback_data="report_article")],
    ])
    await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_back)


# ===== –ù–∞–∑–∞–¥ –∫ —Ç–∏–ø—É –æ—Ç—á–µ—Ç–∞ =====
async def back_to_report_type(cb: types.CallbackQuery, user: User, state: FSMContext):
    await cb.answer()
    data = await state.get_data()
    wh_name = data.get('wh_name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
    await send_content(cb, f"üè¨ –°–∫–ª–∞–¥: *{wh_name}*. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
                       reply_markup=kb_report_type())


# ===== –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤ =====
async def report_articles_page_handler(cb: types.CallbackQuery, user: User, state: FSMContext):
    if not cb.data.startswith("report_art_page:"):
        return
    page = int(cb.data.split(":")[1])
    await report_articles_page(cb, user, state, page=page)


# ===== –ù–∞–∑–∞–¥ –∫ —Å–∫–ª–∞–¥–∞–º =====
async def back_to_warehouses(cb: types.CallbackQuery, user: User, state: FSMContext):
    await cb.answer()
    await state.clear()
    await stocks_view(cb, user, state)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–∫–ª–∞–¥–∞


def register_stocks_handlers(dp: Dispatcher):
    dp.callback_query.register(stocks_root, lambda c: c.data == "stocks")
    dp.callback_query.register(stocks_view, lambda c: c.data == "stocks_view")

    # –§–ª–æ—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/–æ—Ç—á–µ—Ç–∞
    dp.callback_query.register(pick_warehouse_for_view, lambda c: c.data.startswith("pr_wh:"))
    dp.callback_query.register(report_all, lambda c: c.data == "report_all")
    dp.callback_query.register(report_article, lambda c: c.data == "report_article")
    dp.callback_query.register(report_articles_page_handler, lambda c: c.data.startswith("report_art_page:"))
    dp.callback_query.register(pick_article, lambda c: c.data.startswith("report_art:"))
    dp.callback_query.register(back_to_report_type, lambda c: c.data == "back_to_report_type")
    dp.callback_query.register(back_to_warehouses, lambda c: c.data == "stocks_back_to_wh")