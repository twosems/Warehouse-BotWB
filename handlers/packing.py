# handlers/packing.py
from __future__ import annotations

import datetime
from typing import Dict, List, Tuple, Union

from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy import select, func, and_, desc
from sqlalchemy.orm import aliased

from database.db import get_session
from database.models import (
    User, UserRole,
    Warehouse, Product, StockMovement,
    ProductStage, MovementType,
    PackDoc, PackDocItem,
)
from handlers.common import send_content
from keyboards.inline import warehouses_kb

router = Router()

# —Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ
PAGE_SIZE = 12


class PackFSM(StatesGroup):
    choose_wh = State()
    picking = State()
    input_qty = State()


# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï =====

async def _raw_map(session, wh_id: int) -> Dict[int, int]:
    """
    –ö–∞—Ä—Ç–∞ RAW –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ —Å–∫–ª–∞–¥—É: product_id -> qty (>0)
    """
    SM = aliased(StockMovement)
    rows = await session.execute(
        select(SM.product_id, func.sum(SM.qty).label("qty"))
        .where(and_(SM.warehouse_id == wh_id, SM.stage == ProductStage.raw))
        .group_by(SM.product_id)
        .having(func.sum(SM.qty) > 0)
    )
    return {pid: qty for pid, qty in rows.all()}


async def _next_pack_number(session, wh_id: int) -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: YYYYMMDD-XXX –≤ —Ä–∞–∑—Ä–µ–∑–µ —Å–∫–ª–∞–¥–∞ –∏ –¥–Ω—è
    """
    today = datetime.date.today()
    start = datetime.datetime.combine(today, datetime.time.min)
    end = datetime.datetime.combine(today, datetime.time.max)
    last = await session.scalar(
        select(PackDoc.number)
        .where(and_(PackDoc.warehouse_id == wh_id, PackDoc.created_at.between(start, end)))
        .order_by(desc(PackDoc.id))
        .limit(1)
    )
    seq = 1
    if last and "-" in last:
        try:
            seq = int(last.split("-")[-1]) + 1
        except Exception:
            seq = 1
    return f"{today.strftime('%Y%m%d')}-{seq:03d}"


def _cart_summary(cart: Dict[int, int]) -> Tuple[int, int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–∫–æ–ª-–≤–æ –ø–æ–∑–∏—Ü–∏–π, —Å—É–º–º–∞—Ä–Ω–æ–µ qty) –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
    """
    if not cart:
        return 0, 0
    return len(cart), sum(cart.values())


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è inline‚Äë–∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª
def back_inline_kb(target: str = "back_to_packing") -> types.InlineKeyboardMarkup:
    return types.InlineKeyboardMarkup(
        inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=target)]]
    )


def _kb_picking(
        products_rows: List[Tuple[int, str, str | None, int]],
        page: int,
        pages: int,
        cart_cnt: int,
        cart_sum: int,
) -> types.InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥–±–æ—Ä–∞: —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (RAW>0), –ø–∞–≥–∏–Ω–∞—Ü–∏—è, –∫–æ—Ä–∑–∏–Ω–∞/–Ω–∞–∑–∞–¥
    """
    rows: List[List[types.InlineKeyboardButton]] = []

    for pid, name, art, raw_qty in products_rows:
        caption = f"{name} (–∞—Ä—Ç. {art or '‚Äî'}) ‚Ä¢ RAW: {raw_qty}"
        rows.append([types.InlineKeyboardButton(text=caption, callback_data=f"pack_add:{pid}")])

    # –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    if pages > 1:
        prev_cb = f"pack_page:{page-1}" if page > 1 else "noop"
        next_cb = f"pack_page:{page+1}" if page < pages else "noop"
        rows.append([
            types.InlineKeyboardButton(text="‚óÄ", callback_data=prev_cb),
            types.InlineKeyboardButton(text=f"{page}/{pages}", callback_data="noop"),
            types.InlineKeyboardButton(text="‚ñ∂", callback_data=next_cb),
        ])

    # –∫–æ—Ä–∑–∏–Ω–∞/–Ω–∞–≤–∏–≥–∞—Ü–∏—è
    rows.append([
        types.InlineKeyboardButton(text=f"üßæ –ö–æ—Ä–∑–∏–Ω–∞ ({cart_cnt}/{cart_sum})", callback_data="pack_cart"),
    ])
    rows.append([
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–∫–ª–∞–¥–∞–º", callback_data="pack_back_wh"),
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_packing"),
    ])
    return types.InlineKeyboardMarkup(inline_keyboard=rows)


def _kb_cart(can_post: bool) -> types.InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π, —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞)
    """
    rows: List[List[types.InlineKeyboardButton]] = []

    rows.append([types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="pack_continue")])
    if can_post:
        rows.append([types.InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="pack_post")])
    else:
        rows.append([types.InlineKeyboardButton(text="‚õî –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π", callback_data="noop")])

    rows.append([
        types.InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å", callback_data="pack_clear"),
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–±–æ—Ä—É", callback_data="pack_continue"),
    ])
    return types.InlineKeyboardMarkup(inline_keyboard=rows)


def _kb_docs(docs_rows: List[Tuple[int, str, datetime.datetime, str, int]]) -> types.InlineKeyboardMarkup:
    """
    –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —É–ø–∞–∫–æ–≤–∫–∏
    """
    rows: List[List[types.InlineKeyboardButton]] = []
    for did, number, created_at, wh_name, total in docs_rows:
        label = f"‚Ññ{number} ‚Ä¢ {created_at:%d.%m %H:%M} ‚Ä¢ {wh_name} ‚Ä¢ {total} —à—Ç."
        rows.append([types.InlineKeyboardButton(text=label, callback_data=f"pack_doc:{did}")])
    rows.append([types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="pack_root")])
    return types.InlineKeyboardMarkup(inline_keyboard=rows)


async def _render_picking(target: Union[types.CallbackQuery, types.Message], state: FSMContext):
    """
    –†–µ–Ω–¥–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥–±–æ—Ä–∞ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –¥–ª—è CallbackQuery/Message)
    """
    data = await state.get_data()
    wh_name: str = data["wh_name"]
    page: int = int(data.get("page", 1))
    cart: Dict[int, int] = data.get("cart", {})
    raw_map: Dict[int, int] = data["raw_map"]
    products: List[Tuple[int, str, str | None]] = data["products"]

    pages = max(1, (len(products) + PAGE_SIZE - 1) // PAGE_SIZE)
    start, end = (page - 1) * PAGE_SIZE, (page - 1) * PAGE_SIZE + PAGE_SIZE
    slice_rows = [(pid, name, art, raw_map.get(pid, 0)) for (pid, name, art) in products[start:end]]

    cnt, summ = _cart_summary(cart)
    text = f"üè¨ *{wh_name}*\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–ø–∞–∫–æ–≤–∫–∏ (RAW > 0).\n\nüßæ –ö–æ—Ä–∑–∏–Ω–∞: {cnt} –ø–æ–∑., {summ} —à—Ç."

    await send_content(
        target,
        text,
        parse_mode="Markdown",
        reply_markup=_kb_picking(slice_rows, page, pages, cnt, summ),
    )


# ===== ROOT / –ú–ï–ù–Æ =====

@router.callback_query(F.data == "packing")
async def pack_root(cb: types.CallbackQuery, user: User, state: FSMContext):
    await state.clear()
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üÜï –ù–æ–≤–∞—è —É–ø–∞–∫–æ–≤–∫–∞", callback_data="pack_new")],
        [types.InlineKeyboardButton(text="üè∑ –î–æ–∫—É–º–µ–Ω—Ç—ã —É–ø–∞–∫–æ–≤–∫–∏", callback_data="pack_docs")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")],
    ])
    await send_content(cb, "–£–ø–∞–∫–æ–≤–∫–∞ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)


# ===== –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ô –£–ü–ê–ö–û–í–ö–ò =====

@router.callback_query(F.data == "pack_new")
async def pack_new(cb: types.CallbackQuery, user: User, state: FSMContext):
    await state.clear()
    async with get_session() as session:
        wh = (await session.execute(
            select(Warehouse).where(Warehouse.is_active == True).order_by(Warehouse.name)
        )).scalars().all()
    if not wh:
        return await send_content(cb, "üö´ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤.")
    await state.set_state(PackFSM.choose_wh)
    await send_content(cb, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –¥–ª—è –Ω–æ–≤–æ–π —É–ø–∞–∫–æ–≤–∫–∏:", reply_markup=warehouses_kb(wh, prefix="pack_wh"))


@router.callback_query(F.data.startswith("pack_wh:"))
async def pack_choose_wh(cb: types.CallbackQuery, user: User, state: FSMContext):
    # —Ñ–∏–∫—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if await state.get_state() != PackFSM.choose_wh:
        await state.set_state(PackFSM.choose_wh)

    wh_id = int(cb.data.split(":")[1])
    async with get_session() as session:
        wh = await session.get(Warehouse, wh_id)
        if not wh or not wh.is_active:
            return await send_content(cb, "üö´ –°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
        raw = await _raw_map(session, wh_id)
        if not raw:
            return await send_content(cb, f"–ù–∞ —Å–∫–ª–∞–¥–µ *{wh.name}* –Ω–µ—Ç RAW –æ—Å—Ç–∞—Ç–∫–æ–≤.", parse_mode="Markdown")
        prod_rows = (await session.execute(
            select(Product.id, Product.name, Product.article)
            .where(and_(Product.is_active == True, Product.id.in_(raw.keys())))
            .order_by(Product.article)
        )).all()

    await state.update_data(
        wh_id=wh_id,
        wh_name=wh.name,
        page=1,
        cart={},
        raw_map=raw,
        products=prod_rows,
    )
    await state.set_state(PackFSM.picking)
    await _render_picking(cb, state)


@router.callback_query(F.data.startswith("pack_page:"))
async def pack_page(cb: types.CallbackQuery, state: FSMContext):
    page = int(cb.data.split(":")[1])
    await state.update_data(page=page)
    await _render_picking(cb, state)


@router.callback_query(F.data.startswith("pack_add:"))
async def pack_add(cb: types.CallbackQuery, state: FSMContext):
    """
    –ö–ª–∏–∫ –ø–æ —Ç–æ–≤–∞—Ä—É ‚Äî –∑–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    """
    pid = int(cb.data.split(":")[1])
    data = await state.get_data()
    raw_map: Dict[int, int] = data["raw_map"]
    can = int(raw_map.get(pid, 0))
    if can <= 0:
        return await cb.answer("–ù–µ—Ç RAW –æ—Å—Ç–∞—Ç–∫–∞", show_alert=True)
    await state.update_data(current_pid=pid, current_can=can)
    await cb.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —É–ø–∞–∫–æ–≤–∫–∏ (–¥–æ—Å—Ç—É–ø–Ω–æ RAW: {can})")
    await state.set_state(PackFSM.input_qty)


@router.message(PackFSM.input_qty)
async def pack_input_qty(msg: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ qty –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –ø–æ–¥–±–æ—Ä —Å–æ —Å–≤–µ–∂–µ–π –∫–æ—Ä–∑–∏–Ω–æ–π
    """
    try:
        qty = int(msg.text.strip())
        if qty <= 0:
            raise ValueError
    except Exception:
        return await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")

    data = await state.get_data()
    pid = data["current_pid"]
    can = data["current_can"]
    if qty > can:
        return await msg.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ RAW. –î–æ—Å—Ç—É–ø–Ω–æ: {can}")

    cart: Dict[int, int] = data.get("cart", {})
    cart[pid] = cart.get(pid, 0) + qty

    raw_map: Dict[int, int] = data["raw_map"]
    raw_map[pid] = can - qty

    await state.update_data(cart=cart, raw_map=raw_map)
    await state.set_state(PackFSM.picking)

    await msg.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ")
    await _render_picking(msg, state)


# ===== –ö–û–†–ó–ò–ù–ê –ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï =====

@router.callback_query(F.data == "pack_cart")
async def pack_cart(cb: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    cart: Dict[int, int] = data.get("cart", {})
    if not cart:
        return await cb.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True)

    async with get_session() as session:
        rows = (await session.execute(
            select(Product.id, Product.name, Product.article).where(Product.id.in_(cart.keys()))
        )).all()
    info = {pid: (name, art) for pid, name, art in rows}

    lines = ["üßæ *–ü–æ–¥–±–æ—Ä —É–ø–∞–∫–æ–≤–∫–∏*:", ""]
    total = 0
    kb_rows: List[List[types.InlineKeyboardButton]] = []
    idx = 1
    for pid, q in cart.items():
        name, art = info.get(pid, ("?", None))
        lines.append(f"{idx}) `{art or pid}` ‚Äî *{name}*: **{q}** —à—Ç.")
        kb_rows.append([
            types.InlineKeyboardButton(text="‚ûñ1", callback_data=f"pack_dec:{pid}"),
            types.InlineKeyboardButton(text="‚ûï1", callback_data=f"pack_inc:{pid}"),
            types.InlineKeyboardButton(text="‚ùå", callback_data=f"pack_del:{pid}"),
        ])
        total += q
        idx += 1

    lines += ["", f"üìà –ò—Ç–æ–≥–æ: {len(cart)} –ø–æ–∑–∏—Ü–∏–π, {total} —à—Ç."]

    # –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
    kb_rows.append([types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="pack_continue")])
    if total > 0:
        kb_rows.append([types.InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="pack_post")])
    kb_rows.append([
        types.InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å", callback_data="pack_clear"),
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–±–æ—Ä—É", callback_data="pack_continue"),
    ])
    kb = types.InlineKeyboardMarkup(inline_keyboard=kb_rows)

    await send_content(cb, "\n".join(lines), parse_mode="Markdown", reply_markup=kb)


@router.callback_query(F.data.startswith("pack_inc:"))
async def pack_inc(cb: types.CallbackQuery, state: FSMContext):
    pid = int(cb.data.split(":")[1])
    data = await state.get_data()
    cart: Dict[int, int] = data.get("cart", {})
    raw_map: Dict[int, int] = data.get("raw_map", {})
    can_left = int(raw_map.get(pid, 0))
    if can_left <= 0:
        return await cb.answer("–ù–µ—Ç RAW –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è", show_alert=True)
    cart[pid] = cart.get(pid, 0) + 1
    raw_map[pid] = can_left - 1
    await state.update_data(cart=cart, raw_map=raw_map)
    await pack_cart(cb, state)


@router.callback_query(F.data.startswith("pack_dec:"))
async def pack_dec(cb: types.CallbackQuery, state: FSMContext):
    pid = int(cb.data.split(":")[1])
    data = await state.get_data()
    cart: Dict[int, int] = data.get("cart", {})
    q = cart.get(pid, 0)
    if q <= 0:
        return await cb.answer("–≠—Ç–∞ –ø–æ–∑–∏—Ü–∏—è —É–∂–µ 0", show_alert=True)
    cart[pid] = q - 1
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º RAW –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    raw_map: Dict[int, int] = data.get("raw_map", {})
    raw_map[pid] = raw_map.get(pid, 0) + 1
    if cart[pid] == 0:
        del cart[pid]
    await state.update_data(cart=cart, raw_map=raw_map)
    await pack_cart(cb, state)


@router.callback_query(F.data.startswith("pack_del:"))
async def pack_del(cb: types.CallbackQuery, state: FSMContext):
    pid = int(cb.data.split(":")[1])
    data = await state.get_data()
    cart: Dict[int, int] = data.get("cart", {})
    q = cart.pop(pid, 0)
    raw_map: Dict[int, int] = data.get("raw_map", {})
    raw_map[pid] = raw_map.get(pid, 0) + q
    await state.update_data(cart=cart, raw_map=raw_map)
    await cb.answer("–£–¥–∞–ª–µ–Ω–æ")
    await pack_cart(cb, state)


@router.callback_query(F.data == "pack_clear")
async def pack_clear(cb: types.CallbackQuery, state: FSMContext):
    """
    –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π RAW –∏–∑ –±–∞–∑—ã
    """
    data = await state.get_data()
    async with get_session() as session:
        raw = await _raw_map(session, data["wh_id"])
    await state.update_data(cart={}, raw_map=raw)
    await cb.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
    await _render_picking(cb, state)


@router.callback_query(F.data == "pack_continue")
async def pack_continue(cb: types.CallbackQuery, state: FSMContext):
    await _render_picking(cb, state)


# ===== –°–û–ó–î–ê–ù–ò–ï –î–û–ö–£–ú–ï–ù–¢–ê (–ü–†–û–í–ï–î–ï–ù–ò–ï) =====

@router.callback_query(F.data == "pack_post")
async def pack_post(cb: types.CallbackQuery, user: User, state: FSMContext):
    data = await state.get_data()
    cart: Dict[int, int] = data.get("cart", {})
    if not cart:
        return await cb.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True)
    wh_id = data["wh_id"]

    async with get_session() as session:
        number = await _next_pack_number(session, wh_id)
        doc = PackDoc(number=number, warehouse_id=wh_id, user_id=user.id)
        session.add(doc)
        await session.flush()  # –ø–æ–ª—É—á–∞–µ–º doc.id

        # –ø–æ–∑–∏—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ + –¥–≤–∏–∂–µ–Ω–∏—è
        for pid, qty in cart.items():
            session.add(PackDocItem(doc_id=doc.id, product_id=pid, qty=qty))
            # raw -
            session.add(StockMovement(
                type=MovementType.upakovka, stage=ProductStage.raw, qty=-qty,
                product_id=pid, warehouse_id=wh_id, doc_id=doc.id
            ))
            # packed +
            session.add(StockMovement(
                type=MovementType.upakovka, stage=ProductStage.packed, qty=qty,
                product_id=pid, warehouse_id=wh_id, doc_id=doc.id
            ))

        # –ø–æ–º–µ—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –∫–∞–∫ –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã–π
        doc.status = "posted"
        await session.commit()

    await state.clear()
    await send_content(cb, f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É–ø–∞–∫–æ–≤–∫–∏ —Å–æ–∑–¥–∞–Ω: *‚Ññ{number}*.", parse_mode="Markdown")
    await _show_doc(cb, doc_id=None, number=number)


async def _show_doc(cb: types.CallbackQuery, doc_id: int | None = None, number: str | None = None):
    """
    –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —É–ø–∞–∫–æ–≤–∫–∏
    """
    async with get_session() as session:
        if doc_id:
            doc = await session.get(PackDoc, doc_id)
        else:
            doc = (await session.execute(select(PackDoc).where(PackDoc.number == number))).scalar_one()
        wh = await session.get(Warehouse, doc.warehouse_id)
        items = (await session.execute(
            select(PackDocItem, Product.name, Product.article)
            .join(Product, Product.id == PackDocItem.product_id)
            .where(PackDocItem.doc_id == doc.id)
            .order_by(Product.article)
        )).all()

    total = sum(i.PackDocItem.qty for i in items)
    lines = [
        f"üè∑ –î–æ–∫—É–º–µ–Ω—Ç —É–ø–∞–∫–æ–≤–∫–∏ *‚Ññ{doc.number}* –æ—Ç {doc.created_at:%d.%m.%Y %H:%M}",
        f"–°–∫–ª–∞–¥: *{wh.name}*",
        f"–°—Ç–∞—Ç—É—Å: *{doc.status}*",
        "",
        "–°–æ—Å—Ç–∞–≤:"
    ]
    for idx, row in enumerate(items, start=1):
        it = row.PackDocItem
        name, art = row.name, row.article
        lines.append(f"{idx}) `{art or it.product_id}` ‚Äî *{name}*: **{it.qty}** —à—Ç.")
    lines += ["", f"üìà –ò—Ç–æ–≥–æ: {len(items)} –ø–æ–∑–∏—Ü–∏–π, {total} —à—Ç."]

    kb_rows = [[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", callback_data="pack_docs")]]
    kb = types.InlineKeyboardMarkup(inline_keyboard=kb_rows)
    await send_content(cb, "\n".join(lines), parse_mode="Markdown", reply_markup=kb)


# ===== –°–ü–ò–°–û–ö –î–û–ö–£–ú–ï–ù–¢–û–í =====

@router.callback_query(F.data == "pack_docs")
async def pack_docs(cb: types.CallbackQuery, state: FSMContext):
    async with get_session() as session:
        rows = (await session.execute(
            select(
                PackDoc.id, PackDoc.number, PackDoc.created_at, Warehouse.name,
                func.coalesce(func.sum(PackDocItem.qty), 0).label("total")
            )
            .join(Warehouse, Warehouse.id == PackDoc.warehouse_id)
            .join(PackDocItem, PackDocItem.doc_id == PackDoc.id)
            .group_by(PackDoc.id, Warehouse.name)
            .order_by(desc(PackDoc.created_at))
            .limit(20)
        )).all()

    if not rows:
        kb = types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="pack_root")]]
        )
        return await send_content(cb, "–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ —É–ø–∞–∫–æ–≤–∫–∏ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=kb)

    await send_content(cb, "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —É–ø–∞–∫–æ–≤–∫–∏:", reply_markup=_kb_docs(rows))


@router.callback_query(F.data.startswith("pack_doc:"))
async def pack_doc_open(cb: types.CallbackQuery, state: FSMContext):
    did = int(cb.data.split(":")[1])
    await _show_doc(cb, doc_id=did)


# ===== –ù–ê–í–ò–ì–ê–¶–ò–Ø =====

@router.callback_query(F.data == "pack_back_wh")
async def pack_back_wh(cb: types.CallbackQuery, state: FSMContext):
    # –∑–∞–Ω–æ–≤–æ –Ω–∞—á–∞–ª–æ —Ñ–ª–æ—É –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
    await pack_new(cb, user=None, state=state)  # user –≤ pack_new –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è


# –õ–æ–∫–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ¬´–ù–∞–∑–∞–¥¬ª –¥–ª—è —É–ø–∞–∫–æ–≤–∫–∏
@router.callback_query(F.data == "back_to_packing")
async def back_to_packing(cb: types.CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await cb.message.edit_reply_markup()
    except Exception:
        pass
    await cb.message.answer("–†–∞–∑–¥–µ–ª ¬´–£–ø–∞–∫–æ–≤–∫–∞¬ª. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=back_inline_kb("back_to_menu"))
    await cb.answer()
