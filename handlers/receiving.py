# handlers/receiving.py
from aiogram import Dispatcher, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy import select, func, desc
from database.models import ProductStage
from html import escape as h  # –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–∏ HTML

from database.db import get_session
from database.models import User, Warehouse, Product, StockMovement, MovementType
from keyboards.inline import (
    warehouses_kb, products_page_kb, qty_kb, comment_kb, receiving_confirm_kb
)
from handlers.common import send_content
from utils.validators import validate_positive_int
from utils.pagination import build_pagination_keyboard


class IncomingState(StatesGroup):
    choosing_warehouse = State()
    choosing_product = State()
    entering_qty = State()
    entering_comment = State()
    confirming = State()

class ReceivingViewState(StatesGroup):
    viewing_docs = State()


PAGE_SIZE_PRODUCTS = 10
PAGE_SIZE_DOCS = 10


def kb_receiving_root():
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", callback_data="view_docs")],
        [types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="add_doc")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")],
    ])


# ===== –ö–æ—Ä–Ω–µ–≤–æ–µ –º–µ–Ω—é –¥–ª—è "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ" =====
async def receiving_root(cb: types.CallbackQuery, user: User, state: FSMContext):
    await cb.answer()
    await state.clear()
    await send_content(cb, "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=kb_receiving_root())


# ===== –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã =====
async def view_docs(cb: types.CallbackQuery, user: User, state: FSMContext, page: int = 1):
    await cb.answer()
    await state.set_state(ReceivingViewState.viewing_docs)

    async with get_session() as session:
        total_stmt = select(func.count(func.distinct(StockMovement.doc_id))).where(
            StockMovement.type == MovementType.prihod
        )
        total = await session.scalar(total_stmt)

        res = await session.execute(
            select(StockMovement.doc_id, func.min(StockMovement.date).label("date"))
            .where(StockMovement.type == MovementType.prihod)
            .group_by(StockMovement.doc_id)
            .order_by(desc("date"))
            .offset((page - 1) * PAGE_SIZE_DOCS)
            .limit(PAGE_SIZE_DOCS)
        )
        docs = res.all()

    if not docs:
        await send_content(
            cb,
            "üì≠ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é –ø–æ–∫–∞ –Ω–µ—Ç.",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="receiving")]]
            ),
        )
        return

    rows = []
    for row in docs:
        doc_id = row.doc_id
        date_str = row.date.strftime("%Y-%m-%d %H:%M")
        rows.append([types.InlineKeyboardButton(
            text=f"–î–æ–∫—É–º–µ–Ω—Ç ‚Ññ{doc_id} –æ—Ç {date_str}",
            callback_data=f"view_doc:{doc_id}"
        )])

    pag_row = build_pagination_keyboard(
        page=page,
        page_size=PAGE_SIZE_DOCS,
        total=total,
        prev_cb_prefix="view_docs_page",
        next_cb_prefix="view_docs_page",
        prev_text="‚óÄ –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
        next_text="–°–ª–µ–¥—É—é—â–∞—è ‚ñ∂"
    )
    if pag_row:
        rows.append(pag_row)

    rows.append([types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="receiving")])

    kb = types.InlineKeyboardMarkup(inline_keyboard=rows)
    await send_content(cb, "–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é:", reply_markup=kb)


async def view_docs_page(cb: types.CallbackQuery, user: User, state: FSMContext):
    await cb.answer()
    try:
        _, page_str = cb.data.split(":")
        page = int(page_str)
    except Exception:
        page = 1
    await view_docs(cb, user, state, page=page)


# ===== –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ =====
async def view_doc(cb: types.CallbackQuery, user: User, state: FSMContext):
    await cb.answer()
    try:
        _, doc_id_str = cb.data.split(":")
        doc_id = int(doc_id_str)
    except Exception:
        await cb.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return

    async with get_session() as session:
        res = await session.execute(
            select(StockMovement, Warehouse, Product, User)
            .join(Warehouse, Warehouse.id == StockMovement.warehouse_id)
            .join(Product, Product.id == StockMovement.product_id)
            .join(User, User.id == StockMovement.user_id)
            .where(StockMovement.doc_id == doc_id, StockMovement.type == MovementType.prihod)
            .order_by(StockMovement.id)
        )
        movements = res.all()

    if not movements:
        await send_content(cb, "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    first_mv: StockMovement = movements[0][0]
    header = f"üìë <b>–î–æ–∫—É–º–µ–Ω—Ç ‚Ññ{h(str(doc_id))} –æ—Ç {h(first_mv.date.strftime('%Y-%m-%d %H:%M:%S'))}</b>\n\n"

    parts = [header]
    for mv, wh, prod, usr in movements:
        parts.append(
            "üè¨ –°–∫–ª–∞–¥: <b>{wh}</b>\n"
            "üì¶ –¢–æ–≤–∞—Ä: <b>{prod}</b> (–∞—Ä—Ç. <code>{art}</code>)\n"
            "‚û°Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{qty}</b> —à—Ç.\n"
            "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"
            "üë§ –°–æ–∑–¥–∞–ª: <b>{user}</b>\n"
            .format(
                wh=h(wh.name),
                prod=h(prod.name),
                art=h(prod.article),
                qty=h(str(mv.qty)),
                comment=h(mv.comment or "‚Äî"),
                user=h(usr.name or str(usr.id)),
            )
        )
        parts.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –ø–æ–∑–∏—Ü–∏—è–º–∏

    text = "\n".join(parts).strip()

    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º", callback_data="view_docs")],
    ])
    await send_content(cb, text, reply_markup=kb, parse_mode="HTML")


# ===== –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç (—Ç–µ–∫—É—â–∏–π —Ñ–ª–æ—É) =====
async def add_doc(cb: types.CallbackQuery, user: User, state: FSMContext):
    await cb.answer()
    async with get_session() as session:
        res = await session.execute(
            select(Warehouse).where(Warehouse.is_active == True).order_by(Warehouse.name)
        )
        warehouses = res.scalars().all()
    if not warehouses:
        await send_content(cb, "üö´ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await state.clear()
        return

    await state.clear()
    await state.set_state(IncomingState.choosing_warehouse)
    await send_content(cb, "üè¨ –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:",
                       reply_markup=warehouses_kb(warehouses))


# ===== –í—ã–±–æ—Ä —Å–∫–ª–∞–¥–∞ -> —Å—Ä–∞–∑—É —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ =====
async def pick_warehouse(cb: types.CallbackQuery, user: User, state: FSMContext):
    await cb.answer()
    if not cb.data.startswith("rcv_wh:"):
        return

    wh_id = int(cb.data.split(":")[1])
    async with get_session() as session:
        warehouse = (await session.execute(
            select(Warehouse).where(Warehouse.id == wh_id, Warehouse.is_active == True)
        )).scalar()
    if not warehouse:
        await cb.message.answer("üö´ –°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
        return

    await state.update_data(warehouse_id=warehouse.id, warehouse_name=warehouse.name)
    await list_products(cb, user, state, page=1)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–æ–≤–∞—Ä–∞


# ===== –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–∫–ª–∞–¥–∞ =====
async def back_to_warehouses(cb: types.CallbackQuery, user: User, state: FSMContext):
    await cb.answer()
    async with get_session() as session:
        res = await session.execute(
            select(Warehouse).where(Warehouse.is_active == True).order_by(Warehouse.name)
        )
        warehouses = res.scalars().all()
    await state.set_state(IncomingState.choosing_warehouse)
    await send_content(cb, "üè¨ –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥:", reply_markup=warehouses_kb(warehouses))


# ===== –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π =====
async def list_products(cb: types.CallbackQuery, user: User, state: FSMContext, page: int = 1):
    async with get_session() as session:
        total = (await session.execute(
            select(func.count()).select_from(Product).where(Product.is_active == True)
        )).scalar_one()
        res = await session.execute(
            select(Product)
            .where(Product.is_active == True)
            .order_by(Product.name)
            .offset((page - 1) * PAGE_SIZE_PRODUCTS)
            .limit(PAGE_SIZE_PRODUCTS)
        )
        products = res.scalars().all()

    if not products:
        await send_content(cb, "üö´ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä.",
                           reply_markup=warehouses_kb([]))
        return

    await state.set_state(IncomingState.choosing_product)
    await send_content(
        cb,
        "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=products_page_kb(products, page, PAGE_SIZE_PRODUCTS, total, back_to="rcv_back_wh")
    )


async def products_page(cb: types.CallbackQuery, user: User, state: FSMContext):
    await cb.answer()
    if not cb.data.startswith("rcv_prod_page:"):
        return
    try:
        _, page_str = cb.data.split(":")
        page = int(page_str)
    except Exception:
        page = 1
    await list_products(cb, user, state, page=page)


# ===== –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ =====
async def pick_product(cb: types.CallbackQuery, user: User, state: FSMContext):
    await cb.answer()
    if not cb.data.startswith("rcv_prod:"):
        return
    try:
        _, pid_str = cb.data.split(":")
        pid = int(pid_str)
    except Exception:
        await cb.answer("üö´ –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return

    async with get_session() as session:
        product = (await session.execute(
            select(Product).where(Product.id == pid, Product.is_active == True)
        )).scalar()

    if not product:
        await cb.answer("üö´ –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω/–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.", show_alert=True)
        return

    await state.update_data(product_id=product.id, product_article=product.article, product_name=product.name)
    await state.set_state(IncomingState.entering_qty)
    await send_content(
        cb,
        f"üì¶ –¢–æ–≤–∞—Ä: <b>{h(product.name)}</b> (–∞—Ä—Ç. <code>{h(product.article)}</code>)\n\n‚û°Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (&gt;0):",
        reply_markup=qty_kb(back_to="rcv_back_products"),
        parse_mode="HTML",
    )


# ===== –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ =====
async def back_to_products(cb: types.CallbackQuery, user: User, state: FSMContext):
    await cb.answer()
    await list_products(cb, user, state, page=1)


# ===== –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ =====
async def enter_qty(message: types.Message, user: User, state: FSMContext):
    txt = (message.text or "").strip()
    try:
        qty = int(txt)
    except Exception:
        await message.answer("üö´ –ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:",
                             reply_markup=qty_kb(back_to="rcv_back_products"))
        return
    if not validate_positive_int(qty):
        await message.answer("üö´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:",
                             reply_markup=qty_kb(back_to="rcv_back_products"))
        return

    await state.update_data(qty=qty)
    await state.set_state(IncomingState.entering_comment)
    await message.answer(
        "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª):",
        reply_markup=comment_kb(back_to="rcv_back_qty")
    )


# ===== –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π =====
async def skip_comment(cb: types.CallbackQuery, user: User, state: FSMContext):
    await cb.answer()
    data = await state.get_data()
    await state.update_data(comment="")
    await state.set_state(IncomingState.confirming)
    await send_content(
        cb,
        confirm_text(data),
        reply_markup=receiving_confirm_kb(confirm_prefix="rcv", back_to="rcv_back_comment"),
        parse_mode="HTML",
    )


async def back_to_qty(cb: types.CallbackQuery, user: User, state: FSMContext):
    await cb.answer()
    data = await state.get_data()
    await state.set_state(IncomingState.entering_qty)
    await send_content(
        cb,
        f"üì¶ –¢–æ–≤–∞—Ä: <b>{h(str(data['product_name']))}</b> (–∞—Ä—Ç. <code>{h(str(data['product_article']))}</code>)\n\n‚û°Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (&gt;0):",
        reply_markup=qty_kb(back_to="rcv_back_products"),
        parse_mode="HTML",
    )


async def set_comment(message: types.Message, user: User, state: FSMContext):
    comment = (message.text or "").strip()
    if comment == "-":
        comment = ""
    data = await state.get_data()
    await state.update_data(comment=comment)
    await state.set_state(IncomingState.confirming)
    await message.answer(
        confirm_text({**data, "comment": comment}),
        reply_markup=receiving_confirm_kb(confirm_prefix="rcv", back_to="rcv_back_comment"),
        parse_mode="HTML",
    )


def confirm_text(data: dict) -> str:
    return (
        "üìë <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ:</b>\n\n"
        f"üè¨ –°–∫–ª–∞–¥: <b>{h(str(data['warehouse_name']))}</b>\n"
        f"üì¶ –¢–æ–≤–∞—Ä: <b>{h(str(data['product_name']))}</b> (–∞—Ä—Ç. <code>{h(str(data['product_article']))}</code>)\n"
        f"‚û°Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{h(str(data['qty']))}</b>\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {h(data.get('comment') or '‚Äî')}\n"
    )


async def back_to_comment(cb: types.CallbackQuery, user: User, state: FSMContext):
    await cb.answer()
    await state.set_state(IncomingState.entering_comment)
    await send_content(cb, "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª):",
                       reply_markup=comment_kb(back_to="rcv_back_qty"))


# ===== –û—Ç–º–µ–Ω–∞ –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ =====
async def cancel_flow(cb: types.CallbackQuery, user: User, state: FSMContext):
    await cb.answer("üö´ –û—Ç–º–µ–Ω–∞")
    await state.clear()
    await send_content(cb, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=kb_receiving_root())


# ===== –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å =====
async def confirm(cb: types.CallbackQuery, user: User, state: FSMContext):
    await cb.answer()
    if cb.data not in ("rcv_confirm", "rcv_cancel"):
        return
    if cb.data == "rcv_cancel":
        await state.clear()
        await send_content(cb, "üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=kb_receiving_root())
        return

    data = await state.get_data()
    async with get_session() as session:
        max_doc = (await session.execute(
            select(func.max(StockMovement.doc_id)).where(StockMovement.type == MovementType.prihod)
        )).scalar()
        next_doc = (max_doc or 0) + 1

        sm = StockMovement(
            warehouse_id=data["warehouse_id"],
            product_id=data["product_id"],
            qty=data["qty"],
            type=MovementType.prihod,
            stage=ProductStage.raw,
            user_id=user.id,
            doc_id=next_doc,
            comment=data.get("comment", ""),
        )
        session.add(sm)
        await session.commit()
        await session.refresh(sm)

    await state.clear()
    done = (
        f"‚úÖ <b>–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ.</b>\n\n"
        f"üìë –î–æ–∫—É–º–µ–Ω—Ç ‚Ññ <b>{h(str(sm.doc_id))}</b>\n"
        f"üìÖ –î–∞—Ç–∞: <b>{h(sm.date.strftime('%Y-%m-%d %H:%M:%S'))}</b>\n"
        f"üè¨ –°–∫–ª–∞–¥: <b>{h(str(data['warehouse_name']))}</b>\n"
        f"üì¶ –¢–æ–≤–∞—Ä: <b>{h(str(data['product_name']))}</b> (–∞—Ä—Ç. <code>{h(str(data['product_article']))}</code>)\n"
        f"‚û°Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{h(str(data['qty']))}</b>\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {h(data.get('comment') or '‚Äî')}"
    )
    await send_content(cb, done, reply_markup=kb_receiving_root(), parse_mode="HTML")


def register_receiving_handlers(dp: Dispatcher):
    # –ö–æ—Ä–µ–Ω—å
    dp.callback_query.register(receiving_root, lambda c: c.data == "receiving")

    # –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    dp.callback_query.register(view_docs, lambda c: c.data == "view_docs")
    dp.callback_query.register(view_docs_page, lambda c: c.data.startswith("view_docs_page:"))
    dp.callback_query.register(view_doc, lambda c: c.data.startswith("view_doc:"))

    # –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
    dp.callback_query.register(add_doc, lambda c: c.data == "add_doc")

    # –°–∫–ª–∞–¥ -> —Å—Ä–∞–∑—É —Ç–æ–≤–∞—Ä—ã
    dp.callback_query.register(pick_warehouse, lambda c: c.data.startswith("rcv_wh:"))
    dp.callback_query.register(back_to_warehouses, lambda c: c.data == "rcv_back_wh")

    # –¢–æ–≤–∞—Ä—ã –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    dp.callback_query.register(products_page, lambda c: c.data.startswith("rcv_prod_page:"))
    dp.callback_query.register(pick_product, lambda c: c.data.startswith("rcv_prod:"))
    dp.callback_query.register(back_to_products, lambda c: c.data == "rcv_back_products")

    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π/Qty/–û—Ç–º–µ–Ω–∞/–ù–∞–∑–∞–¥
    dp.callback_query.register(skip_comment, lambda c: c.data == "rcv_skip_comment")
    dp.callback_query.register(back_to_qty, lambda c: c.data == "rcv_back_qty")
    dp.callback_query.register(back_to_comment, lambda c: c.data == "rcv_back_comment")
    dp.callback_query.register(cancel_flow, lambda c: c.data == "rcv_cancel")

    # –í–≤–æ–¥—ã
    dp.message.register(enter_qty, IncomingState.entering_qty)
    dp.message.register(set_comment, IncomingState.entering_comment)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    dp.callback_query.register(confirm, IncomingState.confirming)
