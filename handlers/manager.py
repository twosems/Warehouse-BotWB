# handlers/manager.py
from __future__ import annotations

from typing import List, Tuple

from aiogram import Router, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select, func, desc

from database.db import get_session, available_packed
from database.models import (
    User, UserRole,
    Supply, SupplyItem, Warehouse, Product,
    StockMovement, MovementType, ProductStage,
)
from handlers.common import send_content

router = Router()
PAGE = 10

# ---------------------------
# UI helpers
# ---------------------------

def _kb_manager_root() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì• –ö —Å–±–æ—Ä–∫–µ",     callback_data="mgr:list:queued")],
        [InlineKeyboardButton(text="üõ† –í —Ä–∞–±–æ—Ç–µ",     callback_data="mgr:list:assembling")],
        [InlineKeyboardButton(text="‚úÖ –°–æ–±—Ä–∞–Ω–Ω—ã–µ",    callback_data="mgr:list:assembled")],
        [InlineKeyboardButton(text="üöö –í –ø—É—Ç–∏",       callback_data="mgr:list:in_transit")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",        callback_data="back_to_menu")],
    ])

_TITLES = {
    "queued": "üì• –ö —Å–±–æ—Ä–∫–µ",
    "assembling": "üõ† –í —Ä–∞–±–æ—Ç–µ",
    "assembled": "‚úÖ –°–æ–±—Ä–∞–Ω–Ω—ã–µ",
    "in_transit": "üöö –î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è",
    "archived_delivered": "üóÑ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ (–∞—Ä—Ö–∏–≤)",
    "archived_returned": "üóÑ –í–æ–∑–≤—Ä–∞—Ç (–∞—Ä—Ö–∏–≤)",
    "cancelled": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞",
}

def _kb_list(items: List[Tuple[int, str, int]], page: int, status: str) -> InlineKeyboardMarkup:
    start = page * PAGE
    chunk = items[start:start+PAGE]
    rows: List[List[InlineKeyboardButton]] = []

    for sid, wh_name, cnt in chunk:
        rows.append([InlineKeyboardButton(
            text=f"SUP-{sid} ‚Ä¢ {wh_name} ‚Ä¢ –ø–æ–∑–∏—Ü–∏–π {cnt}",
            callback_data=f"mgr:open:{sid}"
        )])

    nav = []
    if start > 0:
        nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"mgr:list:{status}:{page-1}"))
    if start + PAGE < len(items):
        nav.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"mgr:list:{status}:{page+1}"))
    if nav:
        rows.append(nav)

    rows.append([InlineKeyboardButton(text="üè† –ú–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data="manager")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def _kb_card(s: Supply) -> InlineKeyboardMarkup:
    rows: List[List[InlineKeyboardButton]] = []

    # –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ (—Å–º. –¢–ó ¬ß6.5)
    if s.status == "in_transit":
        rows.append([InlineKeyboardButton(text="‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ",          callback_data=f"mgr:delivered:{s.id}")])
        rows.append([InlineKeyboardButton(text="‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç",             callback_data=f"mgr:return:{s.id}")])
        rows.append([InlineKeyboardButton(text="‚ôªÔ∏è –†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å",      callback_data=f"mgr:unpost:{s.id}")])

    # –û–±—â–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫–∞–º", callback_data="manager")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


# ---------------------------
# Root
# ---------------------------

@router.callback_query(F.data == "manager")
async def manager_root(cb: types.CallbackQuery, user: User):
    if user.role not in (UserRole.manager, UserRole.admin):
        await cb.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    await send_content(cb, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏:", reply_markup=_kb_manager_root())


# ---------------------------
# –°–ø–∏—Å–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)
# ---------------------------

@router.callback_query(F.data.startswith("mgr:list:"))
async def mgr_list(cb: types.CallbackQuery, user: User):
    if user.role not in (UserRole.manager, UserRole.admin):
        await cb.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    parts = cb.data.split(":")
    # –≤–∞—Ä–∏–∞–Ω—Ç—ã: "mgr:list:queued" –∏–ª–∏ "mgr:list:queued:2"
    status = parts[2]
    page = int(parts[3]) if len(parts) > 3 else 0

    async with get_session() as s:
        rows = (await s.execute(
            select(
                Supply.id,
                Warehouse.name,
                func.count(SupplyItem.id)
            )
            .join(Warehouse, Warehouse.id == Supply.warehouse_id)
            .outerjoin(SupplyItem, SupplyItem.supply_id == Supply.id)
            .where(Supply.status == status)           # –í–ê–ñ–ù–û: VARCHAR —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–æ —Å—Ç—Ä–æ–∫–æ–π
            .group_by(Supply.id, Warehouse.name)
            .order_by(Supply.id.desc())
        )).all()

    items: List[Tuple[int, str, int]] = [(r[0], r[1], int(r[2])) for r in rows]
    if not items:
        await send_content(cb, f"{_TITLES.get(status, status)}\n\n–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.", reply_markup=_kb_manager_root())
        return

    await send_content(
        cb,
        f"{_TITLES.get(status, status)} ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∫—É:",
        reply_markup=_kb_list(items, page, status)
    )


# ---------------------------
# –ö–∞—Ä—Ç–æ—á–∫–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ (–ø—Ä–æ—Å–º–æ—Ç—Ä)
# ---------------------------

@router.callback_query(F.data.startswith("mgr:open:"))
async def mgr_open(cb: types.CallbackQuery, user: User):
    if user.role not in (UserRole.manager, UserRole.admin):
        await cb.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    sid = int(cb.data.split(":")[-1])
    async with get_session() as s:
        sup = (await s.execute(select(Supply).where(Supply.id == sid))).scalar_one_or_none()
        if not sup:
            await cb.answer("–ü–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        wh_name = (await s.execute(select(Warehouse.name).where(Warehouse.id == sup.warehouse_id))).scalar_one()
        items = (await s.execute(
            select(SupplyItem.product_id, SupplyItem.qty)
            .where(SupplyItem.supply_id == sid)
            .order_by(SupplyItem.id)
        )).all()

        # –¢–µ–ª–æ –∫–∞—Ä—Ç–æ—á–∫–∏ + –∫–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        lines: List[str] = []
        total_qty = 0
        total_def = 0
        for pid, need in items:
            prod = (await s.execute(select(Product.name, Product.article).where(Product.id == pid))).first()
            name, art = prod if prod else (f"#{pid}", None)
            avail = await available_packed(s, sup.warehouse_id, pid)
            deficit = max(0, need - max(avail, 0))
            total_qty += int(need)
            total_def += int(deficit)
            lines.append(
                f"‚Ä¢ `{art or pid}` ‚Äî *{name}*: –ø–ª–∞–Ω {need}, –¥–æ—Å—Ç—É–ø–Ω–æ PACKED {avail}, –¥–µ—Ñ–∏—Ü–∏—Ç {deficit}"
            )

    head = (
        f"üì¶ –ü–æ—Å—Ç–∞–≤–∫–∞ *SUP-{sid}*\n"
        f"üè¨ –°–∫–ª–∞–¥-–∏—Å—Ç–æ—á–Ω–∏–∫: *{wh_name}*\n"
        f"üß≠ –°—Ç–∞—Ç—É—Å: *{sup.status}*\n"
        f"‚Äî\n"
    )
    body = "\n".join(lines) if lines else "_–ü–æ–∑–∏—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç._"
    tail = f"\n\nüìà –ò—Ç–æ–≥–æ: {len(items)} –ø–æ–∑–∏—Ü–∏–π, –ø–ª–∞–Ω {total_qty}, —Å—É–º–º–∞—Ä–Ω—ã–π –¥–µ—Ñ–∏—Ü–∏—Ç {total_def}"
    await send_content(cb, head + body + tail, parse_mode="Markdown", reply_markup=_kb_card(sup))


# ---------------------------
# –î–µ–π—Å—Ç–≤–∏—è –ø–æ in_transit (–º–µ–Ω–µ–¥–∂–µ—Ä)
# ---------------------------

async def _next_doc_id() -> int:
    async with get_session() as s:
        max_doc = (await s.execute(select(func.max(StockMovement.doc_id)))).scalar()
        return int((max_doc or 0) + 1)

@router.callback_query(F.data.startswith("mgr:delivered:"))
async def mgr_delivered(cb: types.CallbackQuery, user: User):
    if user.role not in (UserRole.manager, UserRole.admin):
        await cb.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    sid = int(cb.data.split(":")[-1])
    async with get_session() as s:
        sup = (await s.execute(select(Supply).where(Supply.id == sid))).scalar_one_or_none()
        if not sup:
            return await cb.answer("–ü–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        if sup.status != "in_transit":
            return await cb.answer("–î–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∏–∑ —Å—Ç–∞—Ç—É—Å–∞ in_transit", show_alert=True)

        sup.status = "archived_delivered"
        await s.commit()

    await cb.answer("–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.")
    await mgr_open(cb, user)  # –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É


@router.callback_query(F.data.startswith("mgr:return:"))
async def mgr_return(cb: types.CallbackQuery, user: User):
    """
    –í–æ–∑–≤—Ä–∞—Ç: –ø—Ä–∏—Ö–æ–¥ PACKED –ø–æ –≤—Å–µ–º –ø–æ–∑–∏—Ü–∏—è–º –ø–æ—Å—Ç–∞–≤–∫–∏ –∏ —Å—Ç–∞—Ç—É—Å -> archived_returned.
    """
    if user.role not in (UserRole.manager, UserRole.admin):
        await cb.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    sid = int(cb.data.split(":")[-1])
    async with get_session() as s:
        sup = (await s.execute(select(Supply).where(Supply.id == sid))).scalar_one_or_none()
        if not sup:
            return await cb.answer("–ü–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        if sup.status != "in_transit":
            return await cb.answer("–î–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∏–∑ —Å—Ç–∞—Ç—É—Å–∞ in_transit", show_alert=True)

        rows = (await s.execute(
            select(SupplyItem.product_id, SupplyItem.qty)
            .where(SupplyItem.supply_id == sid)
        )).all()

        doc_id = await _next_doc_id()
        for pid, qty in rows:
            s.add(StockMovement(
                warehouse_id=sup.warehouse_id,
                product_id=pid,
                qty=qty,
                type=MovementType.postavka,            # —Ç–∏–ø ¬´–ø–æ—Å—Ç–∞–≤–∫–∞¬ª –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π
                stage=ProductStage.packed,
                user_id=user.id,
                doc_id=doc_id,
                comment=f"[SUP-RET {sid}] –í–æ–∑–≤—Ä–∞—Ç –∏–∑ –ú–ü",
            ))

        sup.status = "archived_returned"
        await s.commit()

    await cb.answer("–í–æ–∑–≤—Ä–∞—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω.")
    await mgr_open(cb, user)


@router.callback_query(F.data.startswith("mgr:unpost:"))
async def mgr_unpost(cb: types.CallbackQuery, user: User):
    """
    –†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å: –ø—Ä–∏—Ö–æ–¥ PACKED (–≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ —Å–∫–ª–∞–¥) –∏ —Å—Ç–∞—Ç—É—Å -> assembled.
    """
    if user.role not in (UserRole.manager, UserRole.admin):
        await cb.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    sid = int(cb.data.split(":")[-1])
    async with get_session() as s:
        sup = (await s.execute(select(Supply).where(Supply.id == sid))).scalar_one_or_none()
        if not sup:
            return await cb.answer("–ü–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        if sup.status != "in_transit":
            return await cb.answer("–î–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∏–∑ —Å—Ç–∞—Ç—É—Å–∞ in_transit", show_alert=True)

        rows = (await s.execute(
            select(SupplyItem.product_id, SupplyItem.qty)
            .where(SupplyItem.supply_id == sid)
        )).all()

        doc_id = await _next_doc_id()
        for pid, qty in rows:
            s.add(StockMovement(
                warehouse_id=sup.warehouse_id,
                product_id=pid,
                qty=qty,
                type=MovementType.postavka,
                stage=ProductStage.packed,
                user_id=user.id,
                doc_id=doc_id,
                comment=f"[SUP-UNPOST {sid}] –†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏",
            ))

        sup.status = "assembled"   # –≤–µ—Ä–Ω—É–ª–∏ –≤ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ; –∫–æ—Ä–æ–±–∞ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è ‚Äî —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –≤ –∫–∞—Ä—Ç–æ—á–∫–µ/–∫–æ—Ä–æ–±–∞—Ö
        await s.commit()

    await cb.answer("–ü–æ—Å—Ç–∞–≤–∫–∞ —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞.")
    await mgr_open(cb, user)


# ---------------------------
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
# ---------------------------

def register_manager_handlers(dp):
    dp.include_router(router)
