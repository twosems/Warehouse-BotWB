from __future__ import annotations
from typing import Optional, Set, Dict, List

from sqlalchemy import select, update
from sqlalchemy.ext.asyncio import AsyncSession

from database.models import RoleMenuVisibility, UserRole, MenuItem

# –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–µ –ø–æ–¥–ø–∏—Å–∏ –∏ –ø–æ—Ä—è–¥–æ–∫ –ø–æ–∫–∞–∑–∞ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ (–µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –ø—Ä–∞–≤–¥—ã)
LABELS: Dict[MenuItem, str] = {
    MenuItem.stocks:        "üì¶ –û—Å—Ç–∞—Ç–∫–∏",
    MenuItem.receiving:     "‚ûï –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ",
    MenuItem.supplies:      "üöö –ü–æ—Å—Ç–∞–≤–∫–∏",
    MenuItem.packing:       "üéÅ –£–ø–∞–∫–æ–≤–∫–∞",
    MenuItem.picking:       "üß∞ –°–±–æ—Ä–∫–∞",
    MenuItem.reports:       "üìà –û—Ç—á—ë—Ç—ã",
    MenuItem.purchase_cn:   "üá®üá≥ –ó–∞–∫—É–ø–∫–∞ CN",
    MenuItem.msk_warehouse: "üè¢ –°–∫–ª–∞–¥ MSK",

    MenuItem.admin:         "‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ",
}

MENU_ORDER: List[MenuItem] = [
    MenuItem.stocks,
    MenuItem.receiving,
    MenuItem.supplies,
    MenuItem.packing,
    MenuItem.picking,
    MenuItem.reports,
    MenuItem.purchase_cn,
    MenuItem.msk_warehouse,
    MenuItem.admin,
]

# –ë–∞–∑–æ–≤—ã–µ –¥–µ—Ñ–æ–ª—Ç—ã (—è–≤–Ω–æ –∑–∞–¥–∞–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã)
DEFAULT_VISIBILITY: Dict[UserRole, Dict[MenuItem, bool]] = {
    # –ê–¥–º–∏–Ω: –≤–æ–æ–±—â–µ –≤—Å—ë (–≤–∫–ª—é—á–∞—è –±—É–¥—É—â–∏–µ –ø—É–Ω–∫—Ç—ã ‚Äî —Å–º. fallback –Ω–∏–∂–µ)
    UserRole.admin: {
        # –º–æ–∂–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ—á–∏—Å–ª—è—Ç—å ‚Äî fallback –ø–æ–∫—Ä–æ–µ—Ç True –Ω–∞ –ª—é–±—ã–µ –Ω–æ–≤—ã–µ –ø—É–Ω–∫—Ç—ã
    },
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    UserRole.user: {
        MenuItem.stocks:        True,
        MenuItem.receiving:     True,
        MenuItem.supplies:      True,
        MenuItem.packing:       True,
        MenuItem.picking:       True,
        MenuItem.reports:       True,
        MenuItem.purchase_cn:   True,
        MenuItem.msk_warehouse: True,
        MenuItem.admin:         False,
    },
    # –ú–µ–Ω–µ–¥–∂–µ—Ä
    UserRole.manager: {
        MenuItem.stocks:        True,
        MenuItem.receiving:     False,
        MenuItem.supplies:      True,
        MenuItem.packing:       True,
        MenuItem.picking:       True,
        MenuItem.reports:       True,
        MenuItem.purchase_cn:   False,
        MenuItem.msk_warehouse: False,
        MenuItem.admin:         False,
    },
}

def _default_visible(role: UserRole, item: MenuItem) -> bool:
    """
    –§–æ–ª–±—ç–∫-–¥–µ—Ñ–æ–ª—Ç –¥–ª—è –Ω–µ–∑–∞–¥–∞–Ω–Ω—ã—Ö —è–≤–Ω–æ –ø—É–Ω–∫—Ç–æ–≤:
      - admin -> True (–≤–∏–¥–∏—Ç –≤—Å—ë)
      - user/manager -> False (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–µ—Ñ–æ–ª—Ç)
    """
    if role == UserRole.admin:
        return True
    return DEFAULT_VISIBILITY.get(role, {}).get(item, False)

async def ensure_menu_visibility_defaults(session: AsyncSession) -> None:
    """
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤ role_menu_visibility –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—Å–µ—Ö (role, item):
      - –¥–ª—è admin: True –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é,
      - –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π: False, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ –∏–Ω–æ–µ –≤ DEFAULT_VISIBILITY.
    –ù–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º ‚Äî —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä—ã.
    """
    # –ß–∏—Ç–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä—ã (role, item)
    res = await session.execute(
        select(RoleMenuVisibility.role, RoleMenuVisibility.item)
    )
    existing = {(row[0], row[1]) for row in res.all()}

    to_add: list[RoleMenuVisibility] = []
    for role in UserRole:
        for item in MenuItem:
            if (role, item) not in existing:
                default = DEFAULT_VISIBILITY.get(role, {}).get(item, _default_visible(role, item))
                to_add.append(RoleMenuVisibility(role=role, item=item, visible=default))

    if to_add:
        session.add_all(to_add)
        await session.commit()

async def get_visible_menu_items_for_role(
        session: AsyncSession,
        role: UserRole,
) -> Set[MenuItem]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é, –≤–∏–¥–∏–º—ã—Ö –¥–ª—è —Ä–æ–ª–∏.
    """
    res = await session.execute(
        select(RoleMenuVisibility.item).where(
            RoleMenuVisibility.role == role,
            RoleMenuVisibility.visible.is_(True),
            )
    )
    return {row[0] for row in res.all()}

async def get_visibility_map_for_role(
        session: AsyncSession,
        role: UserRole,
) -> Dict[MenuItem, bool]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {MenuItem: visible} –¥–ª—è —Ä–æ–ª–∏ ‚Äî —É–¥–æ–±–Ω–æ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞.
    –ï—Å–ª–∏ –∫–∞–∫–∏—Ö-—Ç–æ –ø—É–Ω–∫—Ç–æ–≤ –≤–Ω–µ–∑–∞–ø–Ω–æ –Ω–µ—Ç ‚Äî –Ω–µ –±–µ–¥–∞, –≤–µ—Ä–Ω—ë–º False (–Ω–æ ensure_* –ª—É—á—à–µ –≤—ã–∑–≤–∞—Ç—å).
    """
    res = await session.execute(
        select(RoleMenuVisibility.item, RoleMenuVisibility.visible).where(
            RoleMenuVisibility.role == role
        )
    )
    data = {row[0]: row[1] for row in res.all()}
    # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏ —Ñ–æ–ª–±—ç–∫–æ–º
    for mi in MenuItem:
        data.setdefault(mi, _default_visible(role, mi))
    return data

async def toggle_menu_visibility(
        session: AsyncSession,
        role: UserRole,
        item: MenuItem,
        value: Optional[bool] = None,
) -> bool:
    """
    –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –∏–ª–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —è–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.
    """
    res = await session.execute(
        select(RoleMenuVisibility).where(
            RoleMenuVisibility.role == role,
            RoleMenuVisibility.item == item,
            ).limit(1)
    )
    vm = res.scalar_one_or_none()

    if vm is None:
        # –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–¥–∏–º —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –¥–µ—Ñ–æ–ª—Ç–æ–º –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º value
        default = _default_visible(role, item)
        vm = RoleMenuVisibility(
            role=role, item=item, visible=default if value is None else bool(value)
        )
        session.add(vm)
        await session.commit()
        return vm.visible

    new_val = (not vm.visible) if value is None else bool(value)
    if new_val == vm.visible:
        return vm.visible

    await session.execute(
        update(RoleMenuVisibility)
        .where(RoleMenuVisibility.id == vm.id)
        .values(visible=new_val)
    )
    await session.commit()
    return new_val
