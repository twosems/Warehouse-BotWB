# database/menu_visibility.py
from __future__ import annotations
from typing import Optional, Set

from sqlalchemy import select, update
from sqlalchemy.ext.asyncio import AsyncSession

from database.models import RoleMenuVisibility, UserRole, MenuItem

# –î–ï–§–û–õ–¢–´: —á—Ç–æ –≤–∏–¥–∏—Ç –∫–∞–∂–¥–∞—è —Ä–æ–ª—å –∏–∑ –∫–æ—Ä–æ–±–∫–∏
DEFAULT_VISIBILITY = {
    # –ê–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å—ë ‚Äî –∞–≤—Ç–æ–º–∞—Ç–æ–º –ø–æ–∫—Ä–æ–µ—Ç –∏ –±—É–¥—É—â–∏–µ –ø—É–Ω–∫—Ç—ã
    UserRole.admin: {item: True for item in MenuItem},

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –≤–∏–¥–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã, –≤–∫–ª—é—á–∞—è –Ω–æ–≤—ã–µ "–ó–∞–∫—É–ø–∫–∞ CN" –∏ "–°–∫–ª–∞–¥ MSK"
    UserRole.user: {
        MenuItem.stocks:         True,
        MenuItem.receiving:      True,
        MenuItem.supplies:       True,
        MenuItem.packing:        True,
        MenuItem.picking:        True,
        MenuItem.reports:        True,
        MenuItem.purchase_cn:    True,   # üá®üá≥ –ó–∞–∫—É–ø–∫–∞ CN
        MenuItem.msk_warehouse:  True,   # üè¢ –°–∫–ª–∞–¥ MSK
        MenuItem.admin:          False,
    },

    # –ú–µ–Ω–µ–¥–∂–µ—Ä: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–∑ –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ/–ø—Ä–∏—ë–º–∫—É CN/MSK
    UserRole.manager: {
        MenuItem.stocks:         True,
        MenuItem.receiving:      False,
        MenuItem.supplies:       True,
        MenuItem.packing:        True,
        MenuItem.picking:        True,
        MenuItem.reports:        True,
        MenuItem.purchase_cn:    False,  # –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ø–æ–∑–∂–µ
        MenuItem.msk_warehouse:  False,  # –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ø–æ–∑–∂–µ
        MenuItem.admin:          False,
    },
}


async def ensure_menu_visibility_defaults(session: AsyncSession) -> None:
    """
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤ role_menu_visibility –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—Å–µ—Ö (role, item)
    —Å–æ–≥–ª–∞—Å–Ω–æ DEFAULT_VISIBILITY. –ù–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º ‚Äì —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ.
    """
    res = await session.execute(
        select(RoleMenuVisibility.role, RoleMenuVisibility.item)
    )
    existing = {(row[0], row[1]) for row in res.all()}

    to_add: list[RoleMenuVisibility] = []
    for role, mapping in DEFAULT_VISIBILITY.items():
        for item, visible in mapping.items():
            key = (role, item)
            if key not in existing:
                to_add.append(
                    RoleMenuVisibility(role=role, item=item, visible=visible)
                )

    if to_add:
        session.add_all(to_add)
        await session.commit()


async def get_visible_menu_items_for_role(
        session: AsyncSession,
        role: UserRole,
) -> Set[MenuItem]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é, –≤–∏–¥–∏–º—ã—Ö –¥–ª—è —Ä–æ–ª–∏.
    """
    res = await session.execute(
        select(RoleMenuVisibility.item).where(
            RoleMenuVisibility.role == role,
            RoleMenuVisibility.visible.is_(True),
            )
    )
    return {row[0] for row in res.all()}


async def toggle_menu_visibility(
        session: AsyncSession,
        role: UserRole,
        item: MenuItem,
        value: Optional[bool] = None,
) -> bool:
    """
    –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –∏–ª–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —è–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.
    """
    res = await session.execute(
        select(RoleMenuVisibility).where(
            RoleMenuVisibility.role == role,
            RoleMenuVisibility.item == item,
            ).limit(1)
    )
    vm = res.scalar_one_or_none()

    if vm is None:
        # –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–¥–∏–º —Å –¥–µ—Ñ–æ–ª—Ç–æ–º –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º value
        default = DEFAULT_VISIBILITY.get(role, {}).get(item, True)
        vm = RoleMenuVisibility(
            role=role, item=item, visible=default if value is None else bool(value)
        )
        session.add(vm)
        await session.commit()
        return vm.visible

    new_val = (not vm.visible) if value is None else bool(value)
    if new_val == vm.visible:
        return vm.visible

    await session.execute(
        update(RoleMenuVisibility)
        .where(RoleMenuVisibility.id == vm.id)
        .values(visible=new_val)
    )
    await session.commit()
    return new_val
